Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 38.07      8.12     8.12 15633939     0.00     0.00  WSmaze::goodToGoWithMouse(int, int)
 10.64     10.39     2.27 28733287     0.00     0.00  WSmaze::CanGoWithMouse(int, int)
  8.86     12.28     1.89     1552     0.00     0.00  WSbeacon::update(bool)
  5.77     13.51     1.23  3610924     0.00     0.00  WSmaze::validToGoWithMouse(int, int)
  4.27     14.42     0.91     1608     0.00     0.00  WSmaze::update()
  4.22     15.32     0.90        1     0.90     0.90  WSbeacon::createSensorMatrix()
  4.13     16.20     0.88 10903470     0.00     0.00  WSmaze::isKnown(int, int)
  3.94     17.04     0.84  5782282     0.00     0.00  WSmaze::goodToOptimizeWithMouse(int, int)
  3.47     17.78     0.74      429     0.00     0.00  WSbeacon::applySensor(double)
  3.14     18.45     0.67     1096     0.00     0.01  Plan::wayTo(Position const&, Position const&)
  3.14     19.12     0.67  3612452     0.00     0.00  Heap::deleteMin()
  2.63     19.68     0.56     4824     0.00     0.00  WSmaze::erode(char (*) [280], char (*) [280])
  2.06     20.12     0.44     4824     0.00     0.00  WSmaze::dilate(char (*) [280], char (*) [280])
  1.64     20.47     0.35      432     0.00     0.01  Plan::wayThroughKnownPlacesTo(Position const&, Position const&)
  1.64     20.82     0.35        1     0.35     0.35  WSmaze::createSensor()
  0.80     20.99     0.17  5416371     0.00     0.00  Heap::insert(Path*)
  0.33     21.06     0.07  5414844     0.00     0.00  Path::update(Path*, double)
  0.19     21.10     0.04     1610     0.00     0.00  WSbeaconsearch::update()
  0.19     21.14     0.04     1608     0.00     0.00  WSmaze::doErodesAndDilates()
  0.14     21.17     0.03   147895     0.00     0.00  Plan::tryWayToPoint(int)
  0.14     21.20     0.03                             WSmaze::nearWall(int, int)
  0.09     21.22     0.02     3151     0.00     0.00  PerformAction(bool, bool, bool, double, double)
  0.09     21.24     0.02     2870     0.00     0.00  WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double)
  0.09     21.26     0.02                             Path::predictedCost(Path*, double)
  0.05     21.27     0.01  3610925     0.00     0.00  Heap::isEmpty()
  0.05     21.28     0.01     1604     0.00     0.00  MotorController::requestSensors(SensorRequest)
  0.05     21.29     0.01     1547     0.00     0.01  Meditator::bestAction()
  0.05     21.30     0.01     1035     0.00     0.01  Meditator::actionGoToBeacon()
  0.05     21.31     0.01        1     0.01     0.01  Plan::Plan(WorldState*, MotorController*)
  0.05     21.32     0.01                             Heap::~Heap()
  0.05     21.33     0.01                             WSmaze::createGoodMouseMatrix()
  0.00     21.33     0.00   156800     0.00     0.00  Path::init(DiscretePosition const&)
  0.00     21.33     0.00    11795     0.00     0.00  WSmotors::getInertiaLeft(int)
  0.00     21.33     0.00    11795     0.00     0.00  WSmotors::getInertiaRight(int)
  0.00     21.33     0.00     8062     0.00     0.00  Log::writeDebug(char const*)
  0.00     21.33     0.00     6440     0.00     0.00  GetObstacleSensor(int)
  0.00     21.33     0.00     6440     0.00     0.00  IsObstacleSensorValid(int)
  0.00     21.33     0.00     3151     0.00     0.00  SetRequest(request_t)
  0.00     21.33     0.00     3147     0.00     0.00  DriveMotors(double, double)
  0.00     21.33     0.00     2922     0.00     0.00  Plan::CyclesUntilObjective()
  0.00     21.33     0.00     2605     0.00     0.00  WSmaze::applySensor(double, double, double)
  0.00     21.33     0.00     2254     0.00     0.00  WorldState::setPlan(Plan*)
  0.00     21.33     0.00     1834     0.00     0.00  recv_packet(char*)
  0.00     21.33     0.00     1719     0.00     0.00  ReadObstacleSensors(char const*, measures_t*)
  0.00     21.33     0.00     1717     0.00     0.00  ReadBeaconSensors(char const*, measures_t*)
  0.00     21.33     0.00     1610     0.00     0.00  GetFinished()
  0.00     21.33     0.00     1610     0.00     0.00  ReadSensors()
  0.00     21.33     0.00     1610     0.00     0.00  GetStopButton()
  0.00     21.33     0.00     1610     0.00     0.00  GetStartButton()
  0.00     21.33     0.00     1610     0.00     0.00  GetVisitingLed()
  0.00     21.33     0.00     1610     0.00     0.00  IsCompassValid()
  0.00     21.33     0.00     1610     0.00     0.00  GetBumperSensor()
  0.00     21.33     0.00     1610     0.00     0.00  GetCompassSensor()
  0.00     21.33     0.00     1610     0.00     0.00  IsGroundSensorValid()
  0.00     21.33     0.00     1610     0.00     0.00  GetTime()
  0.00     21.33     0.00     1610     0.00     0.00  WSposition::update()
  0.00     21.33     0.00     1610     0.00     0.00  WSsensors::update()
  0.00     21.33     0.00     1608     0.00     0.00  WSmaze::applyAllSensors()
  0.00     21.33     0.00     1605     0.00     0.00  WorldState::update()
  0.00     21.33     0.00     1604     0.00     0.00  Log::update()
  0.00     21.33     0.00     1604     0.00     0.00  Meditator::CalculateSensorRequest()
  0.00     21.33     0.00     1577     0.00     0.00  Action::Action(double, double)
  0.00     21.33     0.00     1552     0.00     0.00  IsBeaconReady(int)
  0.00     21.33     0.00     1552     0.00     0.00  WSmotors::update()
  0.00     21.33     0.00     1552     0.00     0.00  WSsensors::inAnyGround()
  0.00     21.33     0.00     1547     0.00     0.00  MotorController::drive(Action*, SensorRequest)
  0.00     21.33     0.00     1547     0.00     0.00  WSmotors::action_done(Action*)
  0.00     21.33     0.00     1528     0.00     0.00  MotorController::goToXY(double, double)
  0.00     21.33     0.00     1528     0.00     0.00  Heap::Heap()
  0.00     21.33     0.00     1528     0.00     0.00  Heap::~Heap()
  0.00     21.33     0.00     1528     0.00     0.00  Path::clear(DiscretePosition const&)
  0.00     21.33     0.00     1528     0.00     0.00  Plan::optimizeRoute()
  0.00     21.33     0.00     1528     0.00     0.00  Plan::findRoute(DiscretePosition, DiscretePosition)
  0.00     21.33     0.00     1510     0.00     0.00  WSsensors::CollidedRecently()
  0.00     21.33     0.00     1507     0.00     0.00  WSposition::PredictPosition(Action*)
  0.00     21.33     0.00     1507     0.00     0.00  MotorController::updateChangedActions()
  0.00     21.33     0.00     1391     0.00     0.00  WSmotors::getMaxPowerFront(double, double, double*, double*)
  0.00     21.33     0.00     1226     0.00     0.00  WSmotors::getMaxPowerLeftTurn(double, double, double*, double*)
  0.00     21.33     0.00     1091     0.00     0.01  Plan::wayTo(Position const&)
  0.00     21.33     0.00     1062     0.00     0.00  WSbeacon::getPosition()
  0.00     21.33     0.00      717     0.00     0.00  GetGroundSensor()
  0.00     21.33     0.00      670     0.00     0.00  WSmaze::applySensorMatrix(int, double, double, double, double, double)
  0.00     21.33     0.00      473     0.00     0.01  Meditator::actionGoToStart()
  0.00     21.33     0.00      473     0.00     0.00  Meditator::decideBeaconToReturn()
  0.00     21.33     0.00      439     0.00     0.00  MotorController::goSlowToXY(double, double)
  0.00     21.33     0.00      430     0.00     0.00  GetBeaconSensor(int)
  0.00     21.33     0.00      429     0.00     0.00  WSposition::getLagDirDeg(int)
  0.00     21.33     0.00      429     0.00     0.00  WSposition::getLagPos(int)
  0.00     21.33     0.00      417     0.00     0.01  Plan::wayThroughKnownPlacesTo(Position const&)
  0.00     21.33     0.00       15     0.00     0.00  std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&)
  0.00     21.33     0.00       10     0.00     0.00  std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&)
  0.00     21.33     0.00        7     0.00     0.00  MotorController::isMouseStoppedAhead()
  0.00     21.33     0.00        7     0.00     0.00  MotorController::dockXY(double, double)
  0.00     21.33     0.00        3     0.00     0.00  Action::setType(atype, int)
  0.00     21.33     0.00        2     0.00     0.00  SetReturningLed2(double, double)
  0.00     21.33     0.00        2     0.00     0.01  Meditator::actionSearchBeacon()
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _Z12dealwithexitv
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _Z3guiPv
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _Z9tServerWSPv
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN10ConnectionC2EPcS0_i
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN10WSpositionC2EP10WorldState
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN10WorldStateC2EiP3Log
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN3LogC2EP10WorldStateb
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN4HeapC2Ev
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN4Path11destinationE
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN6ActionC2Edd
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN6WSmazeC2EP10WorldState
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN8WSbeaconC2EP10WorldStatei
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN8WSmotorsC2EP10WorldState
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController
  0.00     21.33     0.00        1     0.00     0.00  global constructors keyed to _ZN9WSsensorsC2EP10WorldState
  0.00     21.33     0.00        1     0.00     0.00  InitRobot2(char*, int, double*, char*)
  0.00     21.33     0.00        1     0.00     0.00  GetCycleTime()
  0.00     21.33     0.00        1     0.00     0.00  GetFinalTime()
  0.00     21.33     0.00        1     0.00     0.00  GetNoiseMotors()
  0.00     21.33     0.00        1     0.00     0.00  SetVisitingLed2(double, double)
  0.00     21.33     0.00        1     0.00     0.00  GetNumberOfBeacons()
  0.00     21.33     0.00        1     0.00     0.00  GetNoiseBeaconSensor()
  0.00     21.33     0.00        1     0.00     0.00  GetNoiseCompassSensor()
  0.00     21.33     0.00        1     0.00     0.00  GetNoiseObstacleSensor()
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00     21.33     0.00        1     0.00     0.00  Finish2(double, double)
  0.00     21.33     0.00        1     0.00     0.00  Connection::connect()
  0.00     21.33     0.00        1     0.00     0.00  Connection::Connection(char*, char*, int)
  0.00     21.33     0.00        1     0.00     0.00  WSposition::WSposition(WorldState*)
  0.00     21.33     0.00        1     0.00     0.90  WorldState::onlineWSCreation()
  0.00     21.33     0.00        1     0.00     0.35  WorldState::WorldState(int, Log*)
  0.00     21.33     0.00        1     0.00     0.00  WSparameters::update()
  0.00     21.33     0.00        1     0.00     0.00  WSparameters::WSparameters()
  0.00     21.33     0.00        1     0.00     0.00  WSbeaconsearch::getProbableBeaconPos()
  0.00     21.33     0.00        1     0.00     0.00  WSbeaconsearch::WSbeaconsearch(WorldState*)
  0.00     21.33     0.00        1     0.00     0.00  MotorController::MotorController(WorldState*, Log*)
  0.00     21.33     0.00        1     0.00     0.00  Log::init()
  0.00     21.33     0.00        1     0.00     0.00  Log::Log(WorldState*, bool)
  0.00     21.33     0.00        1     0.00    20.00  Mouse::behave()
  0.00     21.33     0.00        1     0.00     0.00  Mouse::parse_opt(int, char**)
  0.00     21.33     0.00        1     0.00     1.26  Mouse::Mouse(int, char**)
  0.00     21.33     0.00        1     0.00     0.00  Action::Action(atype, double, double)
  0.00     21.33     0.00        1     0.00     0.35  WSmaze::WSmaze(WorldState*)
  0.00     21.33     0.00        1     0.00     0.00  WSbeacon::clearArroundBeacon()
  0.00     21.33     0.00        1     0.00     0.90  WSbeacon::WSbeacon(WorldState*, int)
  0.00     21.33     0.00        1     0.00     0.00  WSmotors::WSmotors(WorldState*)
  0.00     21.33     0.00        1     0.00     0.01  Meditator::Meditator(WorldState*, MotorController*)
  0.00     21.33     0.00        1     0.00     0.00  WSsensors::WSsensors(WorldState*)
  0.00     21.33     0.00        1     0.00     0.00  std::vector<WSbeacon*, std::allocator<WSbeacon*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeacon**, std::vector<WSbeacon*, std::allocator<WSbeacon*> > >, WSbeacon* const&)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.05% of 21.33 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.7    0.00   21.26                 main [1]
                0.00   20.00       1/1           Mouse::behave() [2]
                0.00    1.26       1/1           Mouse::Mouse(int, char**) [14]
-----------------------------------------------
                0.00   20.00       1/1           main [1]
[2]     93.8    0.00   20.00       1         Mouse::behave() [2]
                0.01   14.92    1547/1547        Meditator::bestAction() [3]
                0.00    5.04    1605/1605        WorldState::update() [11]
                0.00    0.01    1604/3147        DriveMotors(double, double) [41]
                0.01    0.00    1604/1604        MotorController::requestSensors(SensorRequest) [44]
                0.00    0.01    1547/1547        MotorController::drive(Action*, SensorRequest) [49]
                0.00    0.00    1604/1604        Log::update() [85]
                0.00    0.00    1604/1604        Meditator::CalculateSensorRequest() [86]
                0.00    0.00       1/1           Log::init() [166]
-----------------------------------------------
                0.01   14.92    1547/1547        Mouse::behave() [2]
[3]     70.0    0.01   14.92    1547         Meditator::bestAction() [3]
                0.01    8.38    1034/1035        Meditator::actionGoToBeacon() [6]
                0.00    6.52     471/473         Meditator::actionGoToStart() [8]
                0.00    0.02       2/2           Meditator::actionSearchBeacon() [42]
                0.00    0.00      41/2254        WorldState::setPlan(Plan*) [69]
                0.00    0.00      41/11795       WSmotors::getInertiaLeft(int) [61]
                0.00    0.00      41/11795       WSmotors::getInertiaRight(int) [62]
                0.00    0.00      41/1577        Action::Action(double, double) [87]
                0.00    0.00       7/7           MotorController::isMouseStoppedAhead() [111]
-----------------------------------------------
                0.00    0.04       5/1096        Meditator::actionGoToStart() [8]
                0.67    8.17    1091/1096        Plan::wayTo(Position const&) [5]
[4]     41.6    0.67    8.21    1096         Plan::wayTo(Position const&, Position const&) [4]
                4.85    0.00 9345843/15633939     WSmaze::goodToGoWithMouse(int, int) [7]
                1.40    0.00 17726406/28733287     WSmaze::CanGoWithMouse(int, int) [13]
                0.76    0.00 2235064/3610924     WSmaze::validToGoWithMouse(int, int) [15]
                0.00    0.62    1096/1528        Plan::optimizeRoute() [23]
                0.41    0.00 2236160/3612452     Heap::deleteMin() [26]
                0.11    0.00 3403890/5416371     Heap::insert(Path*) [32]
                0.04    0.00 3402793/5414844     Path::update(Path*, double) [34]
                0.01    0.00 2235065/3610925     Heap::isEmpty() [43]
                0.00    0.00    1096/1528        Path::clear(DiscretePosition const&) [95]
                0.00    0.00    1096/1528        Heap::Heap() [93]
                0.00    0.00    1096/1528        Heap::~Heap() [94]
                0.00    0.00    1096/1528        Plan::findRoute(DiscretePosition, DiscretePosition) [96]
                0.00    0.00    1096/1528        MotorController::goToXY(double, double) [92]
                0.00    0.00     279/439         MotorController::goSlowToXY(double, double) [105]
                0.00    0.00       2/15          std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [109]
-----------------------------------------------
                0.00    0.01       1/1091        Meditator::actionSearchBeacon() [42]
                0.00    0.47      58/1091        Meditator::actionGoToStart() [8]
                0.00    8.36    1032/1091        Meditator::actionGoToBeacon() [6]
[5]     41.4    0.00    8.84    1091         Plan::wayTo(Position const&) [5]
                0.67    8.17    1091/1096        Plan::wayTo(Position const&, Position const&) [4]
-----------------------------------------------
                0.00    0.01       1/1035        Meditator::actionSearchBeacon() [42]
                0.01    8.38    1034/1035        Meditator::bestAction() [3]
[6]     39.4    0.01    8.39    1035         Meditator::actionGoToBeacon() [6]
                0.00    8.36    1032/1091        Plan::wayTo(Position const&) [5]
                0.00    0.03       2/473         Meditator::actionGoToStart() [8]
                0.00    0.00    2067/2254        WorldState::setPlan(Plan*) [69]
                0.00    0.00    1035/1510        WSsensors::CollidedRecently() [97]
                0.00    0.00    1032/1062        WSbeacon::getPosition() [102]
                0.00    0.00    1032/2922        Plan::CyclesUntilObjective() [67]
                0.00    0.00       3/3           Action::setType(atype, int) [113]
                0.00    0.00       1/1577        Action::Action(double, double) [87]
-----------------------------------------------
                0.40    0.00  763923/15633939     WSbeacon::update(bool) [12]
                2.87    0.00 5524173/15633939     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                4.85    0.00 9345843/15633939     Plan::wayTo(Position const&, Position const&) [4]
[7]     38.1    8.12    0.00 15633939         WSmaze::goodToGoWithMouse(int, int) [7]
-----------------------------------------------
                0.00    0.03       2/473         Meditator::actionGoToBeacon() [6]
                0.00    6.52     471/473         Meditator::bestAction() [3]
[8]     30.7    0.00    6.54     473         Meditator::actionGoToStart() [8]
                0.00    5.82     417/417         Plan::wayThroughKnownPlacesTo(Position const&) [10]
                0.00    0.47      58/1091        Plan::wayTo(Position const&) [5]
                0.00    0.14     473/473         Meditator::decideBeaconToReturn() [33]
                0.00    0.07       5/432         Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.04       5/1096        Plan::wayTo(Position const&, Position const&) [4]
                0.00    0.00    1880/2922        Plan::CyclesUntilObjective() [67]
                0.00    0.00     473/1510        WSsensors::CollidedRecently() [97]
                0.00    0.00     465/8062        Log::writeDebug(char const*) [63]
                0.00    0.00     124/2254        WorldState::setPlan(Plan*) [69]
                0.00    0.00      20/1062        WSbeacon::getPosition() [102]
                0.00    0.00       7/7           MotorController::dockXY(double, double) [112]
                0.00    0.00       1/11795       WSmotors::getInertiaLeft(int) [61]
                0.00    0.00       1/11795       WSmotors::getInertiaRight(int) [62]
                0.00    0.00       1/1           Action::Action(atype, double, double) [169]
-----------------------------------------------
                0.00    0.07       5/432         Meditator::actionGoToStart() [8]
                0.01    0.13      10/432         Meditator::decideBeaconToReturn() [33]
                0.34    5.48     417/432         Plan::wayThroughKnownPlacesTo(Position const&) [10]
[9]     28.3    0.35    5.68     432         Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                2.87    0.00 5524173/15633939     WSmaze::goodToGoWithMouse(int, int) [7]
                0.88    0.00 10903470/10903470     WSmaze::isKnown(int, int) [21]
                0.87    0.00 11006881/28733287     WSmaze::CanGoWithMouse(int, int) [13]
                0.47    0.00 1375860/3610924     WSmaze::validToGoWithMouse(int, int) [15]
                0.26    0.00 1376292/3612452     Heap::deleteMin() [26]
                0.00    0.25     432/1528        Plan::optimizeRoute() [23]
                0.06    0.00 2012481/5416371     Heap::insert(Path*) [32]
                0.03    0.00 2012051/5414844     Path::update(Path*, double) [34]
                0.00    0.00 1375860/3610925     Heap::isEmpty() [43]
                0.00    0.00     432/1528        Path::clear(DiscretePosition const&) [95]
                0.00    0.00     432/1528        Heap::Heap() [93]
                0.00    0.00     432/1528        Heap::~Heap() [94]
                0.00    0.00     432/1528        Plan::findRoute(DiscretePosition, DiscretePosition) [96]
                0.00    0.00     432/1528        MotorController::goToXY(double, double) [92]
                0.00    0.00     160/439         MotorController::goSlowToXY(double, double) [105]
-----------------------------------------------
                0.00    5.82     417/417         Meditator::actionGoToStart() [8]
[10]    27.3    0.00    5.82     417         Plan::wayThroughKnownPlacesTo(Position const&) [10]
                0.34    5.48     417/432         Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
-----------------------------------------------
                0.00    5.04    1605/1605        Mouse::behave() [2]
[11]    23.6    0.00    5.04    1605         WorldState::update() [11]
                1.89    1.14    1552/1552        WSbeacon::update(bool) [12]
                0.04    1.00    1608/1608        WSmaze::doErodesAndDilates() [16]
                0.91    0.02    1608/1608        WSmaze::update() [17]
                0.04    0.00    1610/1610        WSbeaconsearch::update() [35]
                0.00    0.00    1610/1610        GetTime() [82]
                0.00    0.00    1610/1610        GetStartButton() [76]
                0.00    0.00    1610/1610        GetFinished() [73]
                0.00    0.00    1610/1610        GetStopButton() [75]
                0.00    0.00    1610/1610        WSsensors::update() [84]
                0.00    0.00    1610/1610        WSposition::update() [83]
                0.00    0.00    1610/1610        ReadSensors() [74]
                0.00    0.00    1552/1552        WSsensors::inAnyGround() [90]
                0.00    0.00    1552/8062        Log::writeDebug(char const*) [63]
                0.00    0.00    1552/1552        IsBeaconReady(int) [88]
                0.00    0.00    1552/1552        WSmotors::update() [89]
-----------------------------------------------
                1.89    1.14    1552/1552        WorldState::update() [11]
[12]    14.2    1.89    1.14    1552         WSbeacon::update(bool) [12]
                0.74    0.00     429/429         WSbeacon::applySensor(double) [25]
                0.40    0.00  763923/15633939     WSmaze::goodToGoWithMouse(int, int) [7]
                0.00    0.00     430/430         GetBeaconSensor(int) [106]
                0.00    0.00     430/8062        Log::writeDebug(char const*) [63]
                0.00    0.00     429/429         WSposition::getLagDirDeg(int) [107]
                0.00    0.00       1/1           WSbeacon::clearArroundBeacon() [170]
-----------------------------------------------
                0.87    0.00 11006881/28733287     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                1.40    0.00 17726406/28733287     Plan::wayTo(Position const&, Position const&) [4]
[13]    10.6    2.27    0.00 28733287         WSmaze::CanGoWithMouse(int, int) [13]
-----------------------------------------------
                0.00    1.26       1/1           main [1]
[14]     5.9    0.00    1.26       1         Mouse::Mouse(int, char**) [14]
                0.00    0.90       1/1           WorldState::onlineWSCreation() [18]
                0.00    0.35       1/1           WorldState::WorldState(int, Log*) [29]
                0.00    0.01       1/1           Meditator::Meditator(WorldState*, MotorController*) [46]
                0.00    0.00       1/1           Mouse::parse_opt(int, char**) [168]
                0.00    0.00       1/1           Connection::Connection(char*, char*, int) [159]
                0.00    0.00       1/1           MotorController::MotorController(WorldState*, Log*) [165]
                0.00    0.00       1/1           Connection::connect() [158]
                0.00    0.00       1/1           Log::Log(WorldState*, bool) [167]
-----------------------------------------------
                0.47    0.00 1375860/3610924     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.76    0.00 2235064/3610924     Plan::wayTo(Position const&, Position const&) [4]
[15]     5.8    1.23    0.00 3610924         WSmaze::validToGoWithMouse(int, int) [15]
-----------------------------------------------
                0.04    1.00    1608/1608        WorldState::update() [11]
[16]     4.9    0.04    1.00    1608         WSmaze::doErodesAndDilates() [16]
                0.56    0.00    4824/4824        WSmaze::erode(char (*) [280], char (*) [280]) [27]
                0.44    0.00    4824/4824        WSmaze::dilate(char (*) [280], char (*) [280]) [28]
-----------------------------------------------
                0.91    0.02    1608/1608        WorldState::update() [11]
[17]     4.4    0.91    0.02    1608         WSmaze::update() [17]
                0.00    0.02    1608/1608        WSmaze::applyAllSensors() [38]
-----------------------------------------------
                0.00    0.90       1/1           Mouse::Mouse(int, char**) [14]
[18]     4.2    0.00    0.90       1         WorldState::onlineWSCreation() [18]
                0.00    0.90       1/1           WSbeacon::WSbeacon(WorldState*, int) [20]
                0.00    0.00       1/1           WSparameters::update() [161]
                0.00    0.00       1/1           WSparameters::WSparameters() [162]
                0.00    0.00       1/1           std::vector<WSbeacon*, std::allocator<WSbeacon*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeacon**, std::vector<WSbeacon*, std::allocator<WSbeacon*> > >, WSbeacon* const&) [173]
-----------------------------------------------
                0.90    0.00       1/1           WSbeacon::WSbeacon(WorldState*, int) [20]
[19]     4.2    0.90    0.00       1         WSbeacon::createSensorMatrix() [19]
-----------------------------------------------
                0.00    0.90       1/1           WorldState::onlineWSCreation() [18]
[20]     4.2    0.00    0.90       1         WSbeacon::WSbeacon(WorldState*, int) [20]
                0.90    0.00       1/1           WSbeacon::createSensorMatrix() [19]
-----------------------------------------------
                0.88    0.00 10903470/10903470     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
[21]     4.1    0.88    0.00 10903470         WSmaze::isKnown(int, int) [21]
-----------------------------------------------
                0.03    0.84  147895/147895      Plan::optimizeRoute() [23]
[22]     4.1    0.03    0.84  147895         Plan::tryWayToPoint(int) [22]
                0.84    0.00 5782282/5782282     WSmaze::goodToOptimizeWithMouse(int, int) [24]
-----------------------------------------------
                0.00    0.25     432/1528        Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.62    1096/1528        Plan::wayTo(Position const&, Position const&) [4]
[23]     4.1    0.00    0.87    1528         Plan::optimizeRoute() [23]
                0.03    0.84  147895/147895      Plan::tryWayToPoint(int) [22]
                0.00    0.00       4/15          std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [109]
-----------------------------------------------
                0.84    0.00 5782282/5782282     Plan::tryWayToPoint(int) [22]
[24]     3.9    0.84    0.00 5782282         WSmaze::goodToOptimizeWithMouse(int, int) [24]
-----------------------------------------------
                0.74    0.00     429/429         WSbeacon::update(bool) [12]
[25]     3.5    0.74    0.00     429         WSbeacon::applySensor(double) [25]
                0.00    0.00     429/429         WSposition::getLagPos(int) [108]
-----------------------------------------------
                0.26    0.00 1376292/3612452     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.41    0.00 2236160/3612452     Plan::wayTo(Position const&, Position const&) [4]
[26]     3.1    0.67    0.00 3612452         Heap::deleteMin() [26]
-----------------------------------------------
                0.56    0.00    4824/4824        WSmaze::doErodesAndDilates() [16]
[27]     2.6    0.56    0.00    4824         WSmaze::erode(char (*) [280], char (*) [280]) [27]
-----------------------------------------------
                0.44    0.00    4824/4824        WSmaze::doErodesAndDilates() [16]
[28]     2.1    0.44    0.00    4824         WSmaze::dilate(char (*) [280], char (*) [280]) [28]
-----------------------------------------------
                0.00    0.35       1/1           Mouse::Mouse(int, char**) [14]
[29]     1.6    0.00    0.35       1         WorldState::WorldState(int, Log*) [29]
                0.00    0.35       1/1           WSmaze::WSmaze(WorldState*) [31]
                0.00    0.00       1/1           WSsensors::WSsensors(WorldState*) [172]
                0.00    0.00       1/1           WSmotors::WSmotors(WorldState*) [171]
                0.00    0.00       1/1           WSposition::WSposition(WorldState*) [160]
                0.00    0.00       1/1           WSbeaconsearch::WSbeaconsearch(WorldState*) [164]
-----------------------------------------------
                0.35    0.00       1/1           WSmaze::WSmaze(WorldState*) [31]
[30]     1.6    0.35    0.00       1         WSmaze::createSensor() [30]
-----------------------------------------------
                0.00    0.35       1/1           WorldState::WorldState(int, Log*) [29]
[31]     1.6    0.00    0.35       1         WSmaze::WSmaze(WorldState*) [31]
                0.35    0.00       1/1           WSmaze::createSensor() [30]
-----------------------------------------------
                0.06    0.00 2012481/5416371     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.11    0.00 3403890/5416371     Plan::wayTo(Position const&, Position const&) [4]
[32]     0.8    0.17    0.00 5416371         Heap::insert(Path*) [32]
-----------------------------------------------
                0.00    0.14     473/473         Meditator::actionGoToStart() [8]
[33]     0.7    0.00    0.14     473         Meditator::decideBeaconToReturn() [33]
                0.01    0.13      10/432         Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.00     453/8062        Log::writeDebug(char const*) [63]
                0.00    0.00      20/2254        WorldState::setPlan(Plan*) [69]
                0.00    0.00      10/1062        WSbeacon::getPosition() [102]
                0.00    0.00      10/2922        Plan::CyclesUntilObjective() [67]
-----------------------------------------------
                0.03    0.00 2012051/5414844     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.04    0.00 3402793/5414844     Plan::wayTo(Position const&, Position const&) [4]
[34]     0.3    0.07    0.00 5414844         Path::update(Path*, double) [34]
-----------------------------------------------
                0.04    0.00    1610/1610        WorldState::update() [11]
[35]     0.2    0.04    0.00    1610         WSbeaconsearch::update() [35]
-----------------------------------------------
                                                 <spontaneous>
[36]     0.1    0.03    0.00                 WSmaze::nearWall(int, int) [36]
-----------------------------------------------
                0.02    0.00    2870/2870        WSmaze::applyAllSensors() [38]
[37]     0.1    0.02    0.00    2870         WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double) [37]
-----------------------------------------------
                0.00    0.02    1608/1608        WSmaze::update() [17]
[38]     0.1    0.00    0.02    1608         WSmaze::applyAllSensors() [38]
                0.02    0.00    2870/2870        WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double) [37]
                0.00    0.00    2605/2605        WSmaze::applySensor(double, double, double) [68]
                0.00    0.00     670/670         WSmaze::applySensorMatrix(int, double, double, double, double, double) [104]
-----------------------------------------------
                                                 <spontaneous>
[39]     0.1    0.02    0.00                 Path::predictedCost(Path*, double) [39]
-----------------------------------------------
                0.00    0.00       1/3151        Finish2(double, double) [52]
                0.00    0.00       1/3151        SetVisitingLed2(double, double) [51]
                0.00    0.00       2/3151        SetReturningLed2(double, double) [50]
                0.02    0.00    3147/3151        DriveMotors(double, double) [41]
[40]     0.1    0.02    0.00    3151         PerformAction(bool, bool, bool, double, double) [40]
-----------------------------------------------
                0.00    0.01    1543/3147        MotorController::drive(Action*, SensorRequest) [49]
                0.00    0.01    1604/3147        Mouse::behave() [2]
[41]     0.1    0.00    0.02    3147         DriveMotors(double, double) [41]
                0.02    0.00    3147/3151        PerformAction(bool, bool, bool, double, double) [40]
-----------------------------------------------
                0.00    0.02       2/2           Meditator::bestAction() [3]
[42]     0.1    0.00    0.02       2         Meditator::actionSearchBeacon() [42]
                0.00    0.01       1/1035        Meditator::actionGoToBeacon() [6]
                0.00    0.01       1/1091        Plan::wayTo(Position const&) [5]
                0.00    0.00       2/1510        WSsensors::CollidedRecently() [97]
                0.00    0.00       2/2254        WorldState::setPlan(Plan*) [69]
                0.00    0.00       1/1           WSbeaconsearch::getProbableBeaconPos() [163]
-----------------------------------------------
                0.00    0.00 1375860/3610925     Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.01    0.00 2235065/3610925     Plan::wayTo(Position const&, Position const&) [4]
[43]     0.0    0.01    0.00 3610925         Heap::isEmpty() [43]
-----------------------------------------------
                0.01    0.00    1604/1604        Mouse::behave() [2]
[44]     0.0    0.01    0.00    1604         MotorController::requestSensors(SensorRequest) [44]
                0.00    0.00    1604/3151        SetRequest(request_t) [66]
                0.00    0.00    1604/11795       WSmotors::getInertiaRight(int) [62]
                0.00    0.00    1604/11795       WSmotors::getInertiaLeft(int) [61]
-----------------------------------------------
                0.01    0.00       1/1           Meditator::Meditator(WorldState*, MotorController*) [46]
[45]     0.0    0.01    0.00       1         Plan::Plan(WorldState*, MotorController*) [45]
                0.00    0.00  156800/156800      Path::init(DiscretePosition const&) [60]
-----------------------------------------------
                0.00    0.01       1/1           Mouse::Mouse(int, char**) [14]
[46]     0.0    0.00    0.01       1         Meditator::Meditator(WorldState*, MotorController*) [46]
                0.01    0.00       1/1           Plan::Plan(WorldState*, MotorController*) [45]
-----------------------------------------------
                                                 <spontaneous>
[47]     0.0    0.01    0.00                 Heap::~Heap() [47]
-----------------------------------------------
                                                 <spontaneous>
[48]     0.0    0.01    0.00                 WSmaze::createGoodMouseMatrix() [48]
-----------------------------------------------
                0.00    0.01    1547/1547        Mouse::behave() [2]
[49]     0.0    0.00    0.01    1547         MotorController::drive(Action*, SensorRequest) [49]
                0.00    0.01    1543/3147        DriveMotors(double, double) [41]
                0.00    0.00       2/2           SetReturningLed2(double, double) [50]
                0.00    0.00       1/1           Finish2(double, double) [52]
                0.00    0.00       1/1           SetVisitingLed2(double, double) [51]
                0.00    0.00    1547/3151        SetRequest(request_t) [66]
                0.00    0.00    1547/1547        WSmotors::action_done(Action*) [91]
                0.00    0.00    1507/1507        MotorController::updateChangedActions() [99]
                0.00    0.00    1507/1507        WSposition::PredictPosition(Action*) [98]
                0.00    0.00    1507/8062        Log::writeDebug(char const*) [63]
-----------------------------------------------
                0.00    0.00       2/2           MotorController::drive(Action*, SensorRequest) [49]
[50]     0.0    0.00    0.00       2         SetReturningLed2(double, double) [50]
                0.00    0.00       2/3151        PerformAction(bool, bool, bool, double, double) [40]
-----------------------------------------------
                0.00    0.00       1/1           MotorController::drive(Action*, SensorRequest) [49]
[51]     0.0    0.00    0.00       1         SetVisitingLed2(double, double) [51]
                0.00    0.00       1/3151        PerformAction(bool, bool, bool, double, double) [40]
-----------------------------------------------
                0.00    0.00       1/1           MotorController::drive(Action*, SensorRequest) [49]
[52]     0.0    0.00    0.00       1         Finish2(double, double) [52]
                0.00    0.00       1/3151        PerformAction(bool, bool, bool, double, double) [40]
-----------------------------------------------
                0.00    0.00  156800/156800      Plan::Plan(WorldState*, MotorController*) [45]
[60]     0.0    0.00    0.00  156800         Path::init(DiscretePosition const&) [60]
-----------------------------------------------
                0.00    0.00       1/11795       Meditator::actionGoToStart() [8]
                0.00    0.00       7/11795       MotorController::dockXY(double, double) [112]
                0.00    0.00      41/11795       Meditator::bestAction() [3]
                0.00    0.00    1528/11795       MotorController::goToXY(double, double) [92]
                0.00    0.00    1604/11795       MotorController::requestSensors(SensorRequest) [44]
                0.00    0.00    8614/11795       WSposition::update() [83]
[61]     0.0    0.00    0.00   11795         WSmotors::getInertiaLeft(int) [61]
-----------------------------------------------
                0.00    0.00       1/11795       Meditator::actionGoToStart() [8]
                0.00    0.00       7/11795       MotorController::dockXY(double, double) [112]
                0.00    0.00      41/11795       Meditator::bestAction() [3]
                0.00    0.00    1528/11795       MotorController::goToXY(double, double) [92]
                0.00    0.00    1604/11795       MotorController::requestSensors(SensorRequest) [44]
                0.00    0.00    8614/11795       WSposition::update() [83]
[62]     0.0    0.00    0.00   11795         WSmotors::getInertiaRight(int) [62]
-----------------------------------------------
                0.00    0.00      58/8062        WSsensors::update() [84]
                0.00    0.00     430/8062        WSbeacon::update(bool) [12]
                0.00    0.00     453/8062        Meditator::decideBeaconToReturn() [33]
                0.00    0.00     465/8062        Meditator::actionGoToStart() [8]
                0.00    0.00    1384/8062        MotorController::goToXY(double, double) [92]
                0.00    0.00    1507/8062        MotorController::drive(Action*, SensorRequest) [49]
                0.00    0.00    1552/8062        WorldState::update() [11]
                0.00    0.00    2213/8062        WSposition::update() [83]
[63]     0.0    0.00    0.00    8062         Log::writeDebug(char const*) [63]
-----------------------------------------------
                0.00    0.00    6440/6440        WSsensors::update() [84]
[64]     0.0    0.00    0.00    6440         GetObstacleSensor(int) [64]
-----------------------------------------------
                0.00    0.00    6440/6440        WSsensors::update() [84]
[65]     0.0    0.00    0.00    6440         IsObstacleSensorValid(int) [65]
-----------------------------------------------
                0.00    0.00    1547/3151        MotorController::drive(Action*, SensorRequest) [49]
                0.00    0.00    1604/3151        MotorController::requestSensors(SensorRequest) [44]
[66]     0.0    0.00    0.00    3151         SetRequest(request_t) [66]
-----------------------------------------------
                0.00    0.00      10/2922        Meditator::decideBeaconToReturn() [33]
                0.00    0.00    1032/2922        Meditator::actionGoToBeacon() [6]
                0.00    0.00    1880/2922        Meditator::actionGoToStart() [8]
[67]     0.0    0.00    0.00    2922         Plan::CyclesUntilObjective() [67]
-----------------------------------------------
                0.00    0.00    2605/2605        WSmaze::applyAllSensors() [38]
[68]     0.0    0.00    0.00    2605         WSmaze::applySensor(double, double, double) [68]
-----------------------------------------------
                0.00    0.00       2/2254        Meditator::actionSearchBeacon() [42]
                0.00    0.00      20/2254        Meditator::decideBeaconToReturn() [33]
                0.00    0.00      41/2254        Meditator::bestAction() [3]
                0.00    0.00     124/2254        Meditator::actionGoToStart() [8]
                0.00    0.00    2067/2254        Meditator::actionGoToBeacon() [6]
[69]     0.0    0.00    0.00    2254         WorldState::setPlan(Plan*) [69]
-----------------------------------------------
                0.00    0.00       1/1834        InitRobot2(char*, int, double*, char*) [132]
                0.00    0.00    1833/1834        socket_thread(void*) [175]
[70]     0.0    0.00    0.00    1834         recv_packet(char*) [70]
-----------------------------------------------
                0.00    0.00    1719/1719        socket_thread(void*) [175]
[71]     0.0    0.00    0.00    1719         ReadObstacleSensors(char const*, measures_t*) [71]
-----------------------------------------------
                0.00    0.00    1717/1717        socket_thread(void*) [175]
[72]     0.0    0.00    0.00    1717         ReadBeaconSensors(char const*, measures_t*) [72]
-----------------------------------------------
                0.00    0.00    1610/1610        WorldState::update() [11]
[73]     0.0    0.00    0.00    1610         GetFinished() [73]
-----------------------------------------------
                0.00    0.00    1610/1610        WorldState::update() [11]
[74]     0.0    0.00    0.00    1610         ReadSensors() [74]
-----------------------------------------------
                0.00    0.00    1610/1610        WorldState::update() [11]
[75]     0.0    0.00    0.00    1610         GetStopButton() [75]
-----------------------------------------------
                0.00    0.00    1610/1610        WorldState::update() [11]
[76]     0.0    0.00    0.00    1610         GetStartButton() [76]
-----------------------------------------------
                0.00    0.00    1610/1610        WSsensors::update() [84]
[77]     0.0    0.00    0.00    1610         GetVisitingLed() [77]
-----------------------------------------------
                0.00    0.00    1610/1610        WSsensors::update() [84]
[78]     0.0    0.00    0.00    1610         IsCompassValid() [78]
-----------------------------------------------
                0.00    0.00    1610/1610        WSsensors::update() [84]
[79]     0.0    0.00    0.00    1610         GetBumperSensor() [79]
-----------------------------------------------
                0.00    0.00    1610/1610        WSsensors::update() [84]
[80]     0.0    0.00    0.00    1610         GetCompassSensor() [80]
-----------------------------------------------
                0.00    0.00    1610/1610        WSsensors::update() [84]
[81]     0.0    0.00    0.00    1610         IsGroundSensorValid() [81]
-----------------------------------------------
                0.00    0.00    1610/1610        WorldState::update() [11]
[82]     0.0    0.00    0.00    1610         GetTime() [82]
-----------------------------------------------
                0.00    0.00    1610/1610        WorldState::update() [11]
[83]     0.0    0.00    0.00    1610         WSposition::update() [83]
                0.00    0.00    8614/11795       WSmotors::getInertiaLeft(int) [61]
                0.00    0.00    8614/11795       WSmotors::getInertiaRight(int) [62]
                0.00    0.00    2213/8062        Log::writeDebug(char const*) [63]
-----------------------------------------------
                0.00    0.00    1610/1610        WorldState::update() [11]
[84]     0.0    0.00    0.00    1610         WSsensors::update() [84]
                0.00    0.00    6440/6440        GetObstacleSensor(int) [64]
                0.00    0.00    6440/6440        IsObstacleSensorValid(int) [65]
                0.00    0.00    1610/1610        GetBumperSensor() [79]
                0.00    0.00    1610/1610        IsGroundSensorValid() [81]
                0.00    0.00    1610/1610        GetCompassSensor() [80]
                0.00    0.00    1610/1610        GetVisitingLed() [77]
                0.00    0.00    1610/1610        IsCompassValid() [78]
                0.00    0.00     717/717         GetGroundSensor() [103]
                0.00    0.00      58/8062        Log::writeDebug(char const*) [63]
-----------------------------------------------
                0.00    0.00    1604/1604        Mouse::behave() [2]
[85]     0.0    0.00    0.00    1604         Log::update() [85]
-----------------------------------------------
                0.00    0.00    1604/1604        Mouse::behave() [2]
[86]     0.0    0.00    0.00    1604         Meditator::CalculateSensorRequest() [86]
-----------------------------------------------
                0.00    0.00       1/1577        Meditator::actionGoToBeacon() [6]
                0.00    0.00       7/1577        MotorController::dockXY(double, double) [112]
                0.00    0.00      41/1577        Meditator::bestAction() [3]
                0.00    0.00    1528/1577        MotorController::goToXY(double, double) [92]
[87]     0.0    0.00    0.00    1577         Action::Action(double, double) [87]
-----------------------------------------------
                0.00    0.00    1552/1552        WorldState::update() [11]
[88]     0.0    0.00    0.00    1552         IsBeaconReady(int) [88]
-----------------------------------------------
                0.00    0.00    1552/1552        WorldState::update() [11]
[89]     0.0    0.00    0.00    1552         WSmotors::update() [89]
-----------------------------------------------
                0.00    0.00    1552/1552        WorldState::update() [11]
[90]     0.0    0.00    0.00    1552         WSsensors::inAnyGround() [90]
-----------------------------------------------
                0.00    0.00    1547/1547        MotorController::drive(Action*, SensorRequest) [49]
[91]     0.0    0.00    0.00    1547         WSmotors::action_done(Action*) [91]
-----------------------------------------------
                0.00    0.00     432/1528        Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.00    1096/1528        Plan::wayTo(Position const&, Position const&) [4]
[92]     0.0    0.00    0.00    1528         MotorController::goToXY(double, double) [92]
                0.00    0.00    1528/11795       WSmotors::getInertiaLeft(int) [61]
                0.00    0.00    1528/11795       WSmotors::getInertiaRight(int) [62]
                0.00    0.00    1528/1577        Action::Action(double, double) [87]
                0.00    0.00    1384/1391        WSmotors::getMaxPowerFront(double, double, double*, double*) [100]
                0.00    0.00    1384/8062        Log::writeDebug(char const*) [63]
                0.00    0.00    1222/1226        WSmotors::getMaxPowerLeftTurn(double, double, double*, double*) [101]
-----------------------------------------------
                0.00    0.00     432/1528        Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.00    1096/1528        Plan::wayTo(Position const&, Position const&) [4]
[93]     0.0    0.00    0.00    1528         Heap::Heap() [93]
-----------------------------------------------
                0.00    0.00     432/1528        Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.00    1096/1528        Plan::wayTo(Position const&, Position const&) [4]
[94]     0.0    0.00    0.00    1528         Heap::~Heap() [94]
-----------------------------------------------
                0.00    0.00     432/1528        Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.00    1096/1528        Plan::wayTo(Position const&, Position const&) [4]
[95]     0.0    0.00    0.00    1528         Path::clear(DiscretePosition const&) [95]
-----------------------------------------------
                0.00    0.00     432/1528        Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.00    1096/1528        Plan::wayTo(Position const&, Position const&) [4]
[96]     0.0    0.00    0.00    1528         Plan::findRoute(DiscretePosition, DiscretePosition) [96]
                0.00    0.00       9/15          std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [109]
-----------------------------------------------
                0.00    0.00       2/1510        Meditator::actionSearchBeacon() [42]
                0.00    0.00     473/1510        Meditator::actionGoToStart() [8]
                0.00    0.00    1035/1510        Meditator::actionGoToBeacon() [6]
[97]     0.0    0.00    0.00    1510         WSsensors::CollidedRecently() [97]
-----------------------------------------------
                0.00    0.00    1507/1507        MotorController::drive(Action*, SensorRequest) [49]
[98]     0.0    0.00    0.00    1507         WSposition::PredictPosition(Action*) [98]
-----------------------------------------------
                0.00    0.00    1507/1507        MotorController::drive(Action*, SensorRequest) [49]
[99]     0.0    0.00    0.00    1507         MotorController::updateChangedActions() [99]
-----------------------------------------------
                0.00    0.00       7/1391        MotorController::dockXY(double, double) [112]
                0.00    0.00    1384/1391        MotorController::goToXY(double, double) [92]
[100]    0.0    0.00    0.00    1391         WSmotors::getMaxPowerFront(double, double, double*, double*) [100]
-----------------------------------------------
                0.00    0.00       4/1226        MotorController::dockXY(double, double) [112]
                0.00    0.00    1222/1226        MotorController::goToXY(double, double) [92]
[101]    0.0    0.00    0.00    1226         WSmotors::getMaxPowerLeftTurn(double, double, double*, double*) [101]
-----------------------------------------------
                0.00    0.00      10/1062        Meditator::decideBeaconToReturn() [33]
                0.00    0.00      20/1062        Meditator::actionGoToStart() [8]
                0.00    0.00    1032/1062        Meditator::actionGoToBeacon() [6]
[102]    0.0    0.00    0.00    1062         WSbeacon::getPosition() [102]
-----------------------------------------------
                0.00    0.00     717/717         WSsensors::update() [84]
[103]    0.0    0.00    0.00     717         GetGroundSensor() [103]
-----------------------------------------------
                0.00    0.00     670/670         WSmaze::applyAllSensors() [38]
[104]    0.0    0.00    0.00     670         WSmaze::applySensorMatrix(int, double, double, double, double, double) [104]
-----------------------------------------------
                0.00    0.00     160/439         Plan::wayThroughKnownPlacesTo(Position const&, Position const&) [9]
                0.00    0.00     279/439         Plan::wayTo(Position const&, Position const&) [4]
[105]    0.0    0.00    0.00     439         MotorController::goSlowToXY(double, double) [105]
-----------------------------------------------
                0.00    0.00     430/430         WSbeacon::update(bool) [12]
[106]    0.0    0.00    0.00     430         GetBeaconSensor(int) [106]
-----------------------------------------------
                0.00    0.00     429/429         WSbeacon::update(bool) [12]
[107]    0.0    0.00    0.00     429         WSposition::getLagDirDeg(int) [107]
-----------------------------------------------
                0.00    0.00     429/429         WSbeacon::applySensor(double) [25]
[108]    0.0    0.00    0.00     429         WSposition::getLagPos(int) [108]
-----------------------------------------------
                0.00    0.00       2/15          Plan::wayTo(Position const&, Position const&) [4]
                0.00    0.00       4/15          Plan::optimizeRoute() [23]
                0.00    0.00       9/15          Plan::findRoute(DiscretePosition, DiscretePosition) [96]
[109]    0.0    0.00    0.00      15         std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [109]
-----------------------------------------------
                0.00    0.00      10/10          WSbeaconsearch::WSbeaconsearch(WorldState*) [164]
[110]    0.0    0.00    0.00      10         std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&) [110]
-----------------------------------------------
                0.00    0.00       7/7           Meditator::bestAction() [3]
[111]    0.0    0.00    0.00       7         MotorController::isMouseStoppedAhead() [111]
-----------------------------------------------
                0.00    0.00       7/7           Meditator::actionGoToStart() [8]
[112]    0.0    0.00    0.00       7         MotorController::dockXY(double, double) [112]
                0.00    0.00       7/11795       WSmotors::getInertiaLeft(int) [61]
                0.00    0.00       7/11795       WSmotors::getInertiaRight(int) [62]
                0.00    0.00       7/1391        WSmotors::getMaxPowerFront(double, double, double*, double*) [100]
                0.00    0.00       7/1577        Action::Action(double, double) [87]
                0.00    0.00       4/1226        WSmotors::getMaxPowerLeftTurn(double, double, double*, double*) [101]
-----------------------------------------------
                0.00    0.00       3/3           Meditator::actionGoToBeacon() [6]
[113]    0.0    0.00    0.00       3         Action::setType(atype, int) [113]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[114]    0.0    0.00    0.00       1         global constructors keyed to _Z12dealwithexitv [114]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[115]    0.0    0.00    0.00       1         global constructors keyed to _Z3guiPv [115]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[116]    0.0    0.00    0.00       1         global constructors keyed to _Z9tServerWSPv [116]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[117]    0.0    0.00    0.00       1         global constructors keyed to _ZN10ConnectionC2EPcS0_i [117]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[118]    0.0    0.00    0.00       1         global constructors keyed to _ZN10WSpositionC2EP10WorldState [118]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[119]    0.0    0.00    0.00       1         global constructors keyed to _ZN10WorldStateC2EiP3Log [119]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[120]    0.0    0.00    0.00       1         global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState [120]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[121]    0.0    0.00    0.00       1         global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log [121]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[122]    0.0    0.00    0.00       1         global constructors keyed to _ZN3LogC2EP10WorldStateb [122]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[123]    0.0    0.00    0.00       1         global constructors keyed to _ZN4HeapC2Ev [123]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[124]    0.0    0.00    0.00       1         global constructors keyed to _ZN4Path11destinationE [124]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[125]    0.0    0.00    0.00       1         global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController [125]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[126]    0.0    0.00    0.00       1         global constructors keyed to _ZN6ActionC2Edd [126]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[127]    0.0    0.00    0.00       1         global constructors keyed to _ZN6WSmazeC2EP10WorldState [127]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[128]    0.0    0.00    0.00       1         global constructors keyed to _ZN8WSbeaconC2EP10WorldStatei [128]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[129]    0.0    0.00    0.00       1         global constructors keyed to _ZN8WSmotorsC2EP10WorldState [129]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[130]    0.0    0.00    0.00       1         global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController [130]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[131]    0.0    0.00    0.00       1         global constructors keyed to _ZN9WSsensorsC2EP10WorldState [131]
-----------------------------------------------
                0.00    0.00       1/1           Connection::connect() [158]
[132]    0.0    0.00    0.00       1         InitRobot2(char*, int, double*, char*) [132]
                0.00    0.00       1/1834        recv_packet(char*) [70]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [161]
[133]    0.0    0.00    0.00       1         GetCycleTime() [133]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [161]
[134]    0.0    0.00    0.00       1         GetFinalTime() [134]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [161]
[135]    0.0    0.00    0.00       1         GetNoiseMotors() [135]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [161]
[136]    0.0    0.00    0.00       1         GetNumberOfBeacons() [136]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [161]
[137]    0.0    0.00    0.00       1         GetNoiseBeaconSensor() [137]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [161]
[138]    0.0    0.00    0.00       1         GetNoiseCompassSensor() [138]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [161]
[139]    0.0    0.00    0.00       1         GetNoiseObstacleSensor() [139]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[140]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [140]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[141]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [141]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[142]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [142]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[143]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [143]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[144]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [144]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[145]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [145]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[146]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [146]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[147]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [147]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[148]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [148]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[149]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [149]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[150]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [150]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[151]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [151]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[152]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [152]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[153]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [153]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[154]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [154]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[155]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [155]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[156]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [156]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [295]
[157]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [157]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [14]
[158]    0.0    0.00    0.00       1         Connection::connect() [158]
                0.00    0.00       1/1           InitRobot2(char*, int, double*, char*) [132]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [14]
[159]    0.0    0.00    0.00       1         Connection::Connection(char*, char*, int) [159]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int, Log*) [29]
[160]    0.0    0.00    0.00       1         WSposition::WSposition(WorldState*) [160]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::onlineWSCreation() [18]
[161]    0.0    0.00    0.00       1         WSparameters::update() [161]
                0.00    0.00       1/1           GetNumberOfBeacons() [136]
                0.00    0.00       1/1           GetFinalTime() [134]
                0.00    0.00       1/1           GetNoiseCompassSensor() [138]
                0.00    0.00       1/1           GetCycleTime() [133]
                0.00    0.00       1/1           GetNoiseBeaconSensor() [137]
                0.00    0.00       1/1           GetNoiseMotors() [135]
                0.00    0.00       1/1           GetNoiseObstacleSensor() [139]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::onlineWSCreation() [18]
[162]    0.0    0.00    0.00       1         WSparameters::WSparameters() [162]
-----------------------------------------------
                0.00    0.00       1/1           Meditator::actionSearchBeacon() [42]
[163]    0.0    0.00    0.00       1         WSbeaconsearch::getProbableBeaconPos() [163]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int, Log*) [29]
[164]    0.0    0.00    0.00       1         WSbeaconsearch::WSbeaconsearch(WorldState*) [164]
                0.00    0.00      10/10          std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&) [110]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [14]
[165]    0.0    0.00    0.00       1         MotorController::MotorController(WorldState*, Log*) [165]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::behave() [2]
[166]    0.0    0.00    0.00       1         Log::init() [166]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [14]
[167]    0.0    0.00    0.00       1         Log::Log(WorldState*, bool) [167]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [14]
[168]    0.0    0.00    0.00       1         Mouse::parse_opt(int, char**) [168]
-----------------------------------------------
                0.00    0.00       1/1           Meditator::actionGoToStart() [8]
[169]    0.0    0.00    0.00       1         Action::Action(atype, double, double) [169]
-----------------------------------------------
                0.00    0.00       1/1           WSbeacon::update(bool) [12]
[170]    0.0    0.00    0.00       1         WSbeacon::clearArroundBeacon() [170]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int, Log*) [29]
[171]    0.0    0.00    0.00       1         WSmotors::WSmotors(WorldState*) [171]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int, Log*) [29]
[172]    0.0    0.00    0.00       1         WSsensors::WSsensors(WorldState*) [172]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::onlineWSCreation() [18]
[173]    0.0    0.00    0.00       1         std::vector<WSbeacon*, std::allocator<WSbeacon*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeacon**, std::vector<WSbeacon*, std::allocator<WSbeacon*> > >, WSbeacon* const&) [173]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.


Index by function name

 [114] global constructors keyed to _Z12dealwithexitv [147] __static_initialization_and_destruction_0(int, int) [9] Plan::wayThroughKnownPlacesTo(Position const&, Position const&)
 [115] global constructors keyed to _Z3guiPv [148] __static_initialization_and_destruction_0(int, int) [5] Plan::wayTo(Position const&)
 [116] global constructors keyed to _Z9tServerWSPv [149] __static_initialization_and_destruction_0(int, int) [4] Plan::wayTo(Position const&, Position const&)
 [117] global constructors keyed to _ZN10ConnectionC2EPcS0_i [150] __static_initialization_and_destruction_0(int, int) [96] Plan::findRoute(DiscretePosition, DiscretePosition)
 [118] global constructors keyed to _ZN10WSpositionC2EP10WorldState [151] __static_initialization_and_destruction_0(int, int) [45] Plan::Plan(WorldState*, MotorController*)
 [119] global constructors keyed to _ZN10WorldStateC2EiP3Log [152] __static_initialization_and_destruction_0(int, int) [2] Mouse::behave()
 [120] global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState [153] __static_initialization_and_destruction_0(int, int) [168] Mouse::parse_opt(int, char**)
 [121] global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log [154] __static_initialization_and_destruction_0(int, int) [14] Mouse::Mouse(int, char**)
 [122] global constructors keyed to _ZN3LogC2EP10WorldStateb [155] __static_initialization_and_destruction_0(int, int) [113] Action::setType(atype, int)
 [123] global constructors keyed to _ZN4HeapC2Ev [156] __static_initialization_and_destruction_0(int, int) [169] Action::Action(atype, double, double)
 [124] global constructors keyed to _ZN4Path11destinationE [157] __static_initialization_and_destruction_0(int, int) [87] Action::Action(double, double)
 [125] global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController [52] Finish2(double, double) [68] WSmaze::applySensor(double, double, double)
 [126] global constructors keyed to _ZN6ActionC2Edd [82] GetTime() [30] WSmaze::createSensor()
 [127] global constructors keyed to _ZN6WSmazeC2EP10WorldState [158] Connection::connect() [13] WSmaze::CanGoWithMouse(int, int)
 [128] global constructors keyed to _ZN8WSbeaconC2EP10WorldStatei [159] Connection::Connection(char*, char*, int) [38] WSmaze::applyAllSensors()
 [129] global constructors keyed to _ZN8WSmotorsC2EP10WorldState [107] WSposition::getLagDirDeg(int) [104] WSmaze::applySensorMatrix(int, double, double, double, double, double)
 [130] global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController [98] WSposition::PredictPosition(Action*) [7] WSmaze::goodToGoWithMouse(int, int)
 [131] global constructors keyed to _ZN9WSsensorsC2EP10WorldState [83] WSposition::update() [16] WSmaze::doErodesAndDilates()
 [132] InitRobot2(char*, int, double*, char*) [108] WSposition::getLagPos(int) [15] WSmaze::validToGoWithMouse(int, int)
  [66] SetRequest(request_t) [160] WSposition::WSposition(WorldState*) [48] WSmaze::createGoodMouseMatrix()
  [41] DriveMotors(double, double) [18] WorldState::onlineWSCreation() [37] WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double)
  [73] GetFinished()          [11] WorldState::update()   [24] WSmaze::goodToOptimizeWithMouse(int, int)
  [74] ReadSensors()          [69] WorldState::setPlan(Plan*) [27] WSmaze::erode(char (*) [280], char (*) [280])
  [70] recv_packet(char*)     [29] WorldState::WorldState(int, Log*) [28] WSmaze::dilate(char (*) [280], char (*) [280])
 [133] GetCycleTime()        [161] WSparameters::update() [17] WSmaze::update()
 [134] GetFinalTime()        [162] WSparameters::WSparameters() [21] WSmaze::isKnown(int, int)
  [75] GetStopButton()       [163] WSbeaconsearch::getProbableBeaconPos() [36] WSmaze::nearWall(int, int)
  [88] IsBeaconReady(int)     [35] WSbeaconsearch::update() [31] WSmaze::WSmaze(WorldState*)
  [40] PerformAction(bool, bool, bool, double, double) [164] WSbeaconsearch::WSbeaconsearch(WorldState*) [25] WSbeacon::applySensor(double)
 [135] GetNoiseMotors()      [105] MotorController::goSlowToXY(double, double) [102] WSbeacon::getPosition()
  [76] GetStartButton()       [44] MotorController::requestSensors(SensorRequest) [170] WSbeacon::clearArroundBeacon()
  [77] GetVisitingLed()      [111] MotorController::isMouseStoppedAhead() [19] WSbeacon::createSensorMatrix()
  [78] IsCompassValid()       [99] MotorController::updateChangedActions() [12] WSbeacon::update(bool)
 [106] GetBeaconSensor(int)   [49] MotorController::drive(Action*, SensorRequest) [20] WSbeacon::WSbeacon(WorldState*, int)
  [79] GetBumperSensor()     [112] MotorController::dockXY(double, double) [91] WSmotors::action_done(Action*)
 [103] GetGroundSensor()      [92] MotorController::goToXY(double, double) [61] WSmotors::getInertiaLeft(int)
  [51] SetVisitingLed2(double, double) [165] MotorController::MotorController(WorldState*, Log*) [62] WSmotors::getInertiaRight(int)
  [80] GetCompassSensor()     [63] Log::writeDebug(char const*) [100] WSmotors::getMaxPowerFront(double, double, double*, double*)
  [50] SetReturningLed2(double, double) [166] Log::init() [101] WSmotors::getMaxPowerLeftTurn(double, double, double*, double*)
  [64] GetObstacleSensor(int) [85] Log::update()          [89] WSmotors::update()
  [72] ReadBeaconSensors(char const*, measures_t*) [167] Log::Log(WorldState*, bool) [171] WSmotors::WSmotors(WorldState*)
 [136] GetNumberOfBeacons()   [32] Heap::insert(Path*)     [3] Meditator::bestAction()
  [81] IsGroundSensorValid()  [43] Heap::isEmpty()         [8] Meditator::actionGoToStart()
  [71] ReadObstacleSensors(char const*, measures_t*) [26] Heap::deleteMin() [6] Meditator::actionGoToBeacon()
 [137] GetNoiseBeaconSensor() [93] Heap::Heap()           [42] Meditator::actionSearchBeacon()
 [138] GetNoiseCompassSensor() [94] Heap::~Heap()         [33] Meditator::decideBeaconToReturn()
  [65] IsObstacleSensorValid(int) [47] Heap::~Heap()      [86] Meditator::CalculateSensorRequest()
 [139] GetNoiseObstacleSensor() [39] Path::predictedCost(Path*, double) [46] Meditator::Meditator(WorldState*, MotorController*)
 [140] __static_initialization_and_destruction_0(int, int) [60] Path::init(DiscretePosition const&) [90] WSsensors::inAnyGround()
 [141] __static_initialization_and_destruction_0(int, int) [95] Path::clear(DiscretePosition const&) [97] WSsensors::CollidedRecently()
 [142] __static_initialization_and_destruction_0(int, int) [34] Path::update(Path*, double) [84] WSsensors::update()
 [143] __static_initialization_and_destruction_0(int, int) [23] Plan::optimizeRoute() [172] WSsensors::WSsensors(WorldState*)
 [144] __static_initialization_and_destruction_0(int, int) [22] Plan::tryWayToPoint(int) [109] std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&)
 [145] __static_initialization_and_destruction_0(int, int) [67] Plan::CyclesUntilObjective() [110] std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&)
 [146] __static_initialization_and_destruction_0(int, int) [10] Plan::wayThroughKnownPlacesTo(Position const&) [173] std::vector<WSbeacon*, std::allocator<WSbeacon*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeacon**, std::vector<WSbeacon*, std::allocator<WSbeacon*> > >, WSbeacon* const&)
