Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 18.64     23.02    23.02        1    23.02    27.59  WSmaze::createSensor()
 12.21     38.10    15.08      926     0.02     0.02  WSmaze::clearGoodToGoMouseMatrix()
 11.45     52.24    14.14      926     0.02     0.02  WSmaze::doErodesAndDilates()
  7.76     61.83     9.59      926     0.01     0.04  WSmaze::update()
  6.64     70.03     8.20      926     0.01     0.01  WSmaze::clearIsKnownMatrix()
  6.27     77.78     7.75      926     0.01     0.01  WSmaze::clearCanGoWithMouseMatrix()
  6.08     85.30     7.51      668     0.01     0.01  WSbeacon::forceFindMax()
  5.60     92.21     6.92  2040093     0.00     0.00  WSmaze::goodToGoWithMouse(int, int)
  3.58     96.64     4.42 31203200     0.00     0.00  Path::clear(DiscretePosition const&)
  3.21    100.59     3.96 20822682     0.00     0.00  MathTools::angle_between(double, double, double)
  3.04    104.34     3.75  2997752     0.00     0.00  WSmaze::CanGoWithMouse(int, int)
  2.28    107.17     2.82  1591748     0.00     0.00  WSmaze::isKnown(int, int)
  1.68    109.25     2.08     2778     0.00     0.00  WSmaze::erode(char (*) [280], char (*) [280])
  1.53    111.14     1.89   424142     0.00     0.00  WSmaze::validToGoWithMouse(int, int)
  1.30    112.75     1.61     2778     0.00     0.00  WSmaze::dilate(char (*) [280], char (*) [280])
  1.13    114.14     1.40  4897489     0.00     0.00  WSbeacon::paint_pixel(int, int, int, int, int, int, int*)
  0.78    115.10     0.96        1     0.96     0.96  WSbeacon::calc_not_visible_mask_maps()
  0.74    116.01     0.91      238     0.00     0.04  Plan::wayThroughKnownPlacesTo(Position const&)
  0.62    116.78     0.77      345     0.00     0.02  Plan::wayTo(Position const&)
  0.60    117.52     0.74      112     0.01     0.02  WSbeacon::update_beacon_visible(bool, int, int)
  0.57    118.22     0.70     1170     0.00     0.00  WSbeacon::update_beacon_not_visible(double, double, int, int, bool, bool)
  0.53    118.88     0.66  2831925     0.00     0.00  WSmaze::distri_normal_acc(double, double)
  0.46    119.44     0.57   424142     0.00     0.00  Heap::percolateDown(int)
  0.43    119.97     0.53        1     0.53     0.53  WSbeacon::calc_visible_mask_maps()
  0.40    120.47     0.50   648109     0.00     0.00  Path::update(Path*, double)
  0.35    120.91     0.43      213     0.00     0.02  Plan::wayExploringTo(Position const&)
  0.29    121.27     0.36     2441     0.00     0.00  WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double)
  0.22    121.54     0.28   648905     0.00     0.00  Heap::insert(Path*)
  0.20    121.79     0.25   231810     0.00     0.00  WSmaze::setMazeMatPos(int, int, char, double)
  0.17    122.00     0.21       10     0.02     0.02  WSbeacon::update_beacon_area(int, int, double, double)
  0.14    122.17     0.17        1     0.17     0.17  global constructors keyed to _ZN6WSmazeC2EP10WorldState
  0.13    122.33     0.16    31137     0.00     0.00  Plan::tryWayToPoint(int)
  0.12    122.48     0.15      926     0.00     0.00  WSbeaconsearch::update()
  0.11    122.62     0.14        1     0.14     0.21  Plan::Plan(WorldState*, MotorController*)
  0.08    122.72     0.10   362992     0.00     0.00  WSbeaconsearch::SearchArea::operator<(WSbeaconsearch::SearchArea const&) const
  0.07    122.81     0.09      796     0.00     0.01  Plan::clearTravelCost(DiscretePosition const&, DiscretePosition const&)
  0.07    122.89     0.09   278196     0.00     0.00  WSbeaconsearch::inArea(int)
  0.06    122.97     0.08     1263     0.00     0.00  WSmaze::applySensorMatrix(int, double, double, double, double, double)
  0.05    123.03     0.06   278357     0.00     0.00  WSbeaconsearch::outOfBounds(int)
  0.04    123.08     0.04   424142     0.00     0.00  Heap::deleteMin()
  0.04    123.12     0.04   156800     0.00     0.00  Path::init(DiscretePosition const&)
  0.03    123.16     0.04      926     0.00     0.00  WSmaze::applyAllSensors()
  0.03    123.20     0.04      668     0.00     0.02  WSbeacon::update(bool)
  0.02    123.23     0.03        1     0.03     0.07  Plan::initTravelCost()
  0.02    123.25     0.03        1     0.03     0.03  WSmaze::init_prob()
  0.02    123.28     0.02   424144     0.00     0.00  Heap::isEmpty()
  0.02    123.30     0.02      926     0.00     0.00  WSmaze::applyRobotMatrix(double, double)
  0.02    123.31     0.02      805     0.00     0.03  Meditator::bestAction()
  0.02    123.33     0.02        1     0.02    27.63  WSmaze::WSmaze(WorldState*)
  0.02    123.36     0.02        1     0.02     1.51  WSbeacon::WSbeacon(WorldState*)
  0.01    123.37     0.01                             WSmaze::nearWall(int, int)
  0.01    123.38     0.01     2091     0.00     0.00  WSmaze::applySensor(double, double, double)
  0.01    123.39     0.01     1613     0.00     0.00  WSmaze::applyCleanSensor(double, double, double)
  0.01    123.40     0.01     1588     0.00     0.00  std::vector<DiscretePosition, std::allocator<DiscretePosition> >::erase(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >)
  0.01    123.41     0.01      805     0.00     0.00  PerformAction(bool, bool, double, double)
  0.01    123.42     0.01      805     0.00     0.00  MotorController::drive(Action*)
  0.01    123.43     0.01      805     0.00     0.00  WSmotors::action_done(Action*)
  0.01    123.44     0.01      794     0.00     0.00  Plan::findRoute(DiscretePosition, DiscretePosition)
  0.01    123.45     0.01      728     0.00     0.00  WSmotors::getMaxPowerLeftTurn(double, double, double*, double*)
  0.01    123.46     0.01      438     0.00     0.00  WSbeacon::getProb()
  0.01    123.47     0.01      345     0.00     0.00  WSbeacon::getX()
  0.01    123.48     0.01      345     0.00     0.02  Meditator::actionGoToBeacon()
  0.01    123.49     0.01        9     0.00     0.04  Meditator::actionLeaveBeacon()
  0.01    123.50     0.01        1     0.01    93.97  Mouse::behave()
  0.00    123.50     0.01      926     0.00     0.00  GetStopButton()
  0.00    123.51     0.01      926     0.00     0.00  GetReturningLed()
  0.00    123.51     0.00     7284     0.00     0.00  Plan::getNextOptimizedPoint()
  0.00    123.51     0.00     3704     0.00     0.00  GetObstacleSensor(int)
  0.00    123.51     0.00     3700     0.00     0.00  GetXmlAttribOnOff(char const*, char const*, bool*)
  0.00    123.51     0.00     1850     0.00     0.00  GetXmlAttribYesNo(char const*, char const*, bool*)
  0.00    123.51     0.00     1594     0.00     0.00  GetGroundSensor()
  0.00    123.51     0.00      935     0.00     0.00  recv_packet(char*)
  0.00    123.51     0.00      926     0.00     0.00  GetFinished()
  0.00    123.51     0.00      926     0.00     0.00  ReadSensors()
  0.00    123.51     0.00      926     0.00     0.00  GetStartButton()
  0.00    123.51     0.00      926     0.00     0.00  GetBumperSensor()
  0.00    123.51     0.00      926     0.00     0.00  GetCompassSensor()
  0.00    123.51     0.00      926     0.00     0.00  GetTime()
  0.00    123.51     0.00      926     0.00     0.00  WSposition::updateMinMaxEver()
  0.00    123.51     0.00      926     0.00     0.00  WSposition::update()
  0.00    123.51     0.00      926     0.00     0.00  WSsensors::update()
  0.00    123.51     0.00      925     0.00     0.00  ReadObstacleSensors(char const*, measures_t*)
  0.00    123.51     0.00      925     0.00     0.00  parse_measures_packet(char const*, measures_t*)
  0.00    123.51     0.00      924     0.00     0.08  WorldState::update()
  0.00    123.51     0.00      923     0.00     0.00  Log::update()
  0.00    123.51     0.00      807     0.00     0.00  WSmotors::update()
  0.00    123.51     0.00      805     0.00     0.00  WorldState::setPlan(Plan*)
  0.00    123.51     0.00      805     0.00     0.00  Log::doneActionLog()
  0.00    123.51     0.00      804     0.00     0.00  Action::Action(double, double)
  0.00    123.51     0.00      803     0.00     0.00  DriveMotors(double, double)
  0.00    123.51     0.00      800     0.00     0.00  WSposition::PredictPosition(Action*)
  0.00    123.51     0.00      800     0.00     0.00  MotorController::updateChangedActions()
  0.00    123.51     0.00      796     0.00     0.00  Heap::Heap()
  0.00    123.51     0.00      794     0.00     0.00  MotorController::goToXY(double, double)
  0.00    123.51     0.00      794     0.00     0.00  Heap::makeEmpty()
  0.00    123.51     0.00      794     0.00     0.00  Heap::~Heap()
  0.00    123.51     0.00      794     0.00     0.00  Plan::optimizeRoute()
  0.00    123.51     0.00      788     0.00     0.00  Meditator::dealWithCollision()
  0.00    123.51     0.00      788     0.00     0.00  WSsensors::CollidedRecently()
  0.00    123.51     0.00      673     0.00     0.00  WSmotors::getMaxPowerFront(double, double, double*, double*)
  0.00    123.51     0.00      668     0.00     0.00  IsBeaconReady()
  0.00    123.51     0.00      382     0.00     0.00  MotorController::goSlowToXY(double, double)
  0.00    123.51     0.00      345     0.00     0.00  WSbeacon::getY()
  0.00    123.51     0.00      334     0.00     0.00  GetBeaconSensor()
  0.00    123.51     0.00      238     0.00     0.04  Meditator::actionGoToStart()
  0.00    123.51     0.00      224     0.00     0.00  WSbeacon::calc_best_definition(bool, int, int, int, int, char)
  0.00    123.51     0.00      224     0.00     0.00  WSbeacon::update_walls_if_visible(double, double, int, int)
  0.00    123.51     0.00      214     0.00     0.00  WSbeaconsearch::getProbableBeaconPos()
  0.00    123.51     0.00      214     0.00     0.02  Meditator::actionSearchBeacon()
  0.00    123.51     0.00       30     0.00     0.00  __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > >(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __false_type)
  0.00    123.51     0.00       20     0.00     0.00  __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > >(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __false_type)
  0.00    123.51     0.00       15     0.00     0.00  std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&)
  0.00    123.51     0.00       10     0.00     0.00  std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&)
  0.00    123.51     0.00        9     0.00     0.00  MotorController::isMouseStoppedAhead()
  0.00    123.51     0.00        9     0.00     0.00  std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::_M_create_node(MotorController::ChangedAction const&)
  0.00    123.51     0.00        9     0.00     0.00  std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::erase(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>)
  0.00    123.51     0.00        9     0.00     0.00  std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::insert(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>, MotorController::ChangedAction const&)
  0.00    123.51     0.00        8     0.00     0.00  MotorController::dockXY(double, double)
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _Z3guiPv
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN10ConnectionC2EPcS0_i
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN10WSpositionC2EP10WorldState
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN10WorldStateC2Ei
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN3LogC2EP10WorldStateb
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN4HeapC2Ev
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN4Path4initERK16DiscretePosition
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN6ActionC2Edd
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN8WSbeaconC2EP10WorldState
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN8WSmotorsC2EP10WorldState
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to _ZN9WSsensorsC2EP10WorldState
  0.00    123.51     0.00        1     0.00     0.00  global constructors keyed to main
  0.00    123.51     0.00        1     0.00     0.00  InitRobot2(char*, int, double*, char*)
  0.00    123.51     0.00        1     0.00     0.00  GetCycleTime()
  0.00    123.51     0.00        1     0.00     0.00  GetFinalTime()
  0.00    123.51     0.00        1     0.00     0.00  GetNoiseMotors()
  0.00    123.51     0.00        1     0.00     0.00  ConnectToServer(char const*, int, char const*, int, double const*)
  0.00    123.51     0.00        1     0.00     0.00  SetReturningLed2(double, double)
  0.00    123.51     0.00        1     0.00     0.00  GetRunningTimeout()
  0.00    123.51     0.00        1     0.00     0.00  parse_params_packet(char const*)
  0.00    123.51     0.00        1     0.00     0.00  GetNoiseBeaconSensor()
  0.00    123.51     0.00        1     0.00     0.00  GetNoiseCompassSensor()
  0.00    123.51     0.00        1     0.00     0.00  GetNoiseObstacleSensor()
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00    123.51     0.00        1     0.00     0.00  Finish2(double, double)
  0.00    123.51     0.00        1     0.00     0.00  Connection::connect()
  0.00    123.51     0.00        1     0.00     0.00  Connection::Connection(char*, char*, int)
  0.00    123.51     0.00        1     0.00     0.00  WSposition::WSposition(WorldState*)
  0.00    123.51     0.00        1     0.00     1.51  WorldState::onlineWSCreation()
  0.00    123.51     0.00        1     0.00    27.63  WorldState::WorldState(int)
  0.00    123.51     0.00        1     0.00     0.00  WSparameters::update()
  0.00    123.51     0.00        1     0.00     0.00  WSparameters::WSparameters()
  0.00    123.51     0.00        1     0.00     0.00  WSbeaconsearch::allUnreachableOrVisited()
  0.00    123.51     0.00        1     0.00     0.00  WSbeaconsearch::markCurrentPositionAsUnreachable()
  0.00    123.51     0.00        1     0.00     0.00  WSbeaconsearch::WSbeaconsearch(WorldState*)
  0.00    123.51     0.00        1     0.00     0.00  MotorController::MotorController(WorldState*, Log*)
  0.00    123.51     0.00        1     0.00     0.00  Log::init()
  0.00    123.51     0.00        1     0.00     0.00  Log::Log(WorldState*, bool)
  0.00    123.51     0.00        1     0.00     0.00  Mouse::parse_opt(int, char**)
  0.00    123.51     0.00        1     0.00    29.36  Mouse::Mouse(int, char**)
  0.00    123.51     0.00        1     0.00     0.00  Action::Action(atype, double, double)
  0.00    123.51     0.00        1     0.00     0.00  WSmaze::createKnownMatrix()
  0.00    123.51     0.00        1     0.00     0.00  WSmaze::createRobotMatrix()
  0.00    123.51     0.00        1     0.00     0.00  WSmaze::createGoMouseMatrix()
  0.00    123.51     0.00        1     0.00     0.00  WSmaze::createValidGoMatrix()
  0.00    123.51     0.00        1     0.00     0.00  WSmaze::createGoodMouseMatrix()
  0.00    123.51     0.00        1     0.00     0.00  WSbeacon::markCurrentPositionAsUnreachable()
  0.00    123.51     0.00        1     0.00     0.00  WSmotors::WSmotors(WorldState*)
  0.00    123.51     0.00        1     0.00     0.21  Meditator::Meditator(WorldState*, MotorController*)
  0.00    123.51     0.00        1     0.00     0.00  WSsensors::WSsensors(WorldState*)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.01% of 123.51 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.9    0.00  123.33                 main [1]
                0.01   93.96       1/1           Mouse::behave() [2]
                0.00   29.36       1/1           Mouse::Mouse(int, char**) [5]
-----------------------------------------------
                0.01   93.96       1/1           main [1]
[2]     76.1    0.01   93.96       1         Mouse::behave() [2]
                0.00   70.27     924/924         WorldState::update() [3]
                0.02   23.63     805/805         Meditator::bestAction() [9]
                0.01    0.02     805/805         MotorController::drive(Action*) [66]
                0.00    0.00     923/923         Log::update() [107]
                0.00    0.00     800/800         MotorController::updateChangedActions() [113]
                0.00    0.00       1/1           Log::init() [185]
-----------------------------------------------
                0.00   70.27     924/924         Mouse::behave() [2]
[3]     56.9    0.00   70.27     924         WorldState::update() [3]
                9.59   31.80     926/926         WSmaze::update() [4]
               14.14    3.69     926/926         WSmaze::doErodesAndDilates() [10]
                0.04   10.57     668/668         WSbeacon::update(bool) [12]
                0.15    0.29     926/926         WSbeaconsearch::update() [47]
                0.01    0.00     926/926         GetStopButton() [80]
                0.01    0.00     926/926         GetReturningLed() [81]
                0.00    0.00     926/926         ReadSensors() [97]
                0.00    0.00     926/926         GetTime() [101]
                0.00    0.00     926/926         GetStartButton() [98]
                0.00    0.00     926/926         GetFinished() [96]
                0.00    0.00     926/926         WSsensors::update() [104]
                0.00    0.00     926/926         WSposition::updateMinMaxEver() [102]
                0.00    0.00     926/926         WSposition::update() [103]
                0.00    0.00     807/807         WSmotors::update() [108]
                0.00    0.00     668/668         IsBeaconReady() [120]
-----------------------------------------------
                9.59   31.80     926/926         WorldState::update() [3]
[4]     33.5    9.59   31.80     926         WSmaze::update() [4]
               15.08    0.00     926/926         WSmaze::clearGoodToGoMouseMatrix() [11]
                8.20    0.00     926/926         WSmaze::clearIsKnownMatrix() [15]
                7.75    0.00     926/926         WSmaze::clearCanGoWithMouseMatrix() [18]
                0.04    0.63     926/926         WSmaze::applyAllSensors() [40]
                0.02    0.08     926/926         WSmaze::applyRobotMatrix(double, double) [59]
-----------------------------------------------
                0.00   29.36       1/1           main [1]
[5]     23.8    0.00   29.36       1         Mouse::Mouse(int, char**) [5]
                0.00   27.63       1/1           WorldState::WorldState(int) [6]
                0.00    1.51       1/1           WorldState::onlineWSCreation() [32]
                0.00    0.21       1/1           Meditator::Meditator(WorldState*, MotorController*) [54]
                0.00    0.00       1/1           Mouse::parse_opt(int, char**) [187]
                0.00    0.00       1/1           Connection::Connection(char*, char*, int) [177]
                0.00    0.00       1/1           MotorController::MotorController(WorldState*, Log*) [184]
                0.00    0.00       1/1           Connection::connect() [176]
                0.00    0.00       1/1           Log::Log(WorldState*, bool) [186]
-----------------------------------------------
                0.00   27.63       1/1           Mouse::Mouse(int, char**) [5]
[6]     22.4    0.00   27.63       1         WorldState::WorldState(int) [6]
                0.02   27.61       1/1           WSmaze::WSmaze(WorldState*) [7]
                0.00    0.00       1/1           WSsensors::WSsensors(WorldState*) [196]
                0.00    0.00       1/1           WSmotors::WSmotors(WorldState*) [195]
                0.00    0.00       1/1           WSposition::WSposition(WorldState*) [178]
                0.00    0.00       1/1           WSbeaconsearch::WSbeaconsearch(WorldState*) [183]
-----------------------------------------------
                0.02   27.61       1/1           WorldState::WorldState(int) [6]
[7]     22.4    0.02   27.61       1         WSmaze::WSmaze(WorldState*) [7]
               23.02    4.57       1/1           WSmaze::createSensor() [8]
                0.03    0.00       1/1           WSmaze::init_prob() [67]
                0.00    0.00       1/1           WSmaze::createRobotMatrix() [190]
                0.00    0.00       1/1           WSmaze::createGoodMouseMatrix() [193]
                0.00    0.00       1/1           WSmaze::createGoMouseMatrix() [191]
                0.00    0.00       1/1           WSmaze::createKnownMatrix() [189]
                0.00    0.00       1/1           WSmaze::createValidGoMatrix() [192]
-----------------------------------------------
               23.02    4.57       1/1           WSmaze::WSmaze(WorldState*) [7]
[8]     22.3   23.02    4.57       1         WSmaze::createSensor() [8]
                3.91    0.00 20579040/20822682     MathTools::angle_between(double, double, double) [25]
                0.66    0.00 2831925/2831925     WSmaze::distri_normal_acc(double, double) [41]
-----------------------------------------------
                0.02   23.63     805/805         Mouse::behave() [2]
[9]     19.2    0.02   23.63     805         Meditator::bestAction() [9]
                0.00    9.79     238/238         Meditator::actionGoToStart() [14]
                0.01    8.14     344/345         Meditator::actionGoToBeacon() [16]
                0.00    5.30     214/214         Meditator::actionSearchBeacon() [21]
                0.01    0.38       9/9           Meditator::actionLeaveBeacon() [48]
                0.00    0.00       9/9           MotorController::isMouseStoppedAhead() [129]
                0.00    0.00       1/1           WSbeaconsearch::markCurrentPositionAsUnreachable() [182]
                0.00    0.00       1/1           WSbeaconsearch::allUnreachableOrVisited() [181]
                0.00    0.00       1/1           WSbeacon::markCurrentPositionAsUnreachable() [194]
-----------------------------------------------
               14.14    3.69     926/926         WorldState::update() [3]
[10]    14.4   14.14    3.69     926         WSmaze::doErodesAndDilates() [10]
                2.08    0.00    2778/2778        WSmaze::erode(char (*) [280], char (*) [280]) [29]
                1.61    0.00    2778/2778        WSmaze::dilate(char (*) [280], char (*) [280]) [31]
-----------------------------------------------
               15.08    0.00     926/926         WSmaze::update() [4]
[11]    12.2   15.08    0.00     926         WSmaze::clearGoodToGoMouseMatrix() [11]
-----------------------------------------------
                0.04   10.57     668/668         WorldState::update() [3]
[12]     8.6    0.04   10.57     668         WSbeacon::update(bool) [12]
                7.51    0.00     668/668         WSbeacon::forceFindMax() [19]
                0.74    1.40     112/112         WSbeacon::update_beacon_visible(bool, int, int) [28]
                0.65    0.00    1092/1170        WSbeacon::update_beacon_not_visible(double, double, int, int, bool, bool) [39]
                0.21    0.00      10/10          WSbeacon::update_beacon_area(int, int, double, double) [55]
                0.00    0.05     224/224         WSbeacon::update_walls_if_visible(double, double, int, int) [64]
                0.00    0.00     668/1594        GetGroundSensor() [94]
                0.00    0.00     334/334         GetBeaconSensor() [123]
-----------------------------------------------
                0.03    0.35       9/238         Meditator::actionLeaveBeacon() [48]
                0.88    8.92     229/238         Meditator::actionGoToStart() [14]
[13]     8.2    0.91    9.27     238         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                2.34    0.00  691635/2040093     WSmaze::goodToGoWithMouse(int, int) [20]
                2.19    0.00 1238672/1591748     WSmaze::isKnown(int, int) [27]
                1.61    0.00 1286168/2997752     WSmaze::CanGoWithMouse(int, int) [26]
                0.03    1.32     238/796         Plan::clearTravelCost(DiscretePosition const&, DiscretePosition const&) [23]
                0.79    0.00  177328/424142      WSmaze::validToGoWithMouse(int, int) [30]
                0.00    0.41     238/794         Plan::optimizeRoute() [35]
                0.02    0.24  177328/424142      Heap::deleteMin() [42]
                0.19    0.00  249655/648109      Path::update(Path*, double) [45]
                0.11    0.00  249893/648905      Heap::insert(Path*) [51]
                0.01    0.00  177328/424144      Heap::isEmpty() [68]
                0.00    0.00     238/794         Plan::findRoute(DiscretePosition, DiscretePosition) [69]
                0.00    0.00     238/794         MotorController::goToXY(double, double) [78]
                0.00    0.00     238/796         Heap::Heap() [114]
                0.00    0.00     238/794         Heap::makeEmpty() [115]
                0.00    0.00     238/794         Heap::~Heap() [116]
                0.00    0.00     140/382         MotorController::goSlowToXY(double, double) [121]
-----------------------------------------------
                0.00    9.79     238/238         Meditator::bestAction() [9]
[14]     7.9    0.00    9.79     238         Meditator::actionGoToStart() [14]
                0.88    8.92     229/238         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00       8/8           MotorController::dockXY(double, double) [82]
                0.00    0.00     238/805         WorldState::setPlan(Plan*) [109]
                0.00    0.00     229/788         Meditator::dealWithCollision() [117]
                0.00    0.00       1/1           Action::Action(atype, double, double) [188]
-----------------------------------------------
                8.20    0.00     926/926         WSmaze::update() [4]
[15]     6.6    8.20    0.00     926         WSmaze::clearIsKnownMatrix() [15]
-----------------------------------------------
                0.00    0.02       1/345         Meditator::actionSearchBeacon() [21]
                0.01    8.14     344/345         Meditator::bestAction() [9]
[16]     6.6    0.01    8.16     345         Meditator::actionGoToBeacon() [16]
                0.77    7.38     345/345         Plan::wayTo(Position const&) [17]
                0.01    0.00     345/345         WSbeacon::getX() [76]
                0.00    0.00     345/788         Meditator::dealWithCollision() [117]
                0.00    0.00     345/805         WorldState::setPlan(Plan*) [109]
                0.00    0.00     345/345         WSbeacon::getY() [122]
-----------------------------------------------
                0.77    7.38     345/345         Meditator::actionGoToBeacon() [16]
[17]     6.6    0.77    7.38     345         Plan::wayTo(Position const&) [17]
                2.17    0.00  641183/2040093     WSmaze::goodToGoWithMouse(int, int) [20]
                0.04    1.92     345/796         Plan::clearTravelCost(DiscretePosition const&, DiscretePosition const&) [23]
                1.39    0.00 1110528/2997752     WSmaze::CanGoWithMouse(int, int) [26]
                0.72    0.00  160667/424142      WSmaze::validToGoWithMouse(int, int) [30]
                0.00    0.59     343/794         Plan::optimizeRoute() [35]
                0.02    0.22  160667/424142      Heap::deleteMin() [42]
                0.20    0.00  256959/648109      Path::update(Path*, double) [45]
                0.11    0.00  257304/648905      Heap::insert(Path*) [51]
                0.01    0.00  160669/424144      Heap::isEmpty() [68]
                0.00    0.00     343/794         Plan::findRoute(DiscretePosition, DiscretePosition) [69]
                0.00    0.00     343/794         MotorController::goToXY(double, double) [78]
                0.00    0.00     345/796         Heap::Heap() [114]
                0.00    0.00     343/794         Heap::makeEmpty() [115]
                0.00    0.00     343/794         Heap::~Heap() [116]
                0.00    0.00     173/382         MotorController::goSlowToXY(double, double) [121]
                0.00    0.00       2/804         Action::Action(double, double) [111]
-----------------------------------------------
                7.75    0.00     926/926         WSmaze::update() [4]
[18]     6.3    7.75    0.00     926         WSmaze::clearCanGoWithMouseMatrix() [18]
-----------------------------------------------
                7.51    0.00     668/668         WSbeacon::update(bool) [12]
[19]     6.1    7.51    0.00     668         WSbeacon::forceFindMax() [19]
-----------------------------------------------
                1.20    0.00  353289/2040093     Plan::wayExploringTo(Position const&) [22]
                1.20    0.00  353986/2040093     Plan::tryWayToPoint(int) [37]
                2.17    0.00  641183/2040093     Plan::wayTo(Position const&) [17]
                2.34    0.00  691635/2040093     Plan::wayThroughKnownPlacesTo(Position const&) [13]
[20]     5.6    6.92    0.00 2040093         WSmaze::goodToGoWithMouse(int, int) [20]
-----------------------------------------------
                0.00    5.30     214/214         Meditator::bestAction() [9]
[21]     4.3    0.00    5.30     214         Meditator::actionSearchBeacon() [21]
                0.43    4.84     213/213         Plan::wayExploringTo(Position const&) [22]
                0.00    0.02       1/345         Meditator::actionGoToBeacon() [16]
                0.00    0.00     214/438         WSbeacon::getProb() [75]
                0.00    0.00     214/788         Meditator::dealWithCollision() [117]
                0.00    0.00     213/805         WorldState::setPlan(Plan*) [109]
                0.00    0.00     213/214         WSbeaconsearch::getProbableBeaconPos() [124]
-----------------------------------------------
                0.43    4.84     213/213         Meditator::actionSearchBeacon() [21]
[22]     4.3    0.43    4.84     213         Plan::wayExploringTo(Position const&) [22]
                0.02    1.18     213/796         Plan::clearTravelCost(DiscretePosition const&, DiscretePosition const&) [23]
                1.20    0.00  353289/2040093     WSmaze::goodToGoWithMouse(int, int) [20]
                0.75    0.00  601056/2997752     WSmaze::CanGoWithMouse(int, int) [26]
                0.63    0.00  353076/1591748     WSmaze::isKnown(int, int) [27]
                0.38    0.00   86147/424142      WSmaze::validToGoWithMouse(int, int) [30]
                0.00    0.37     213/794         Plan::optimizeRoute() [35]
                0.01    0.12   86147/424142      Heap::deleteMin() [42]
                0.11    0.00  141495/648109      Path::update(Path*, double) [45]
                0.06    0.00  141708/648905      Heap::insert(Path*) [51]
                0.00    0.00   86147/424144      Heap::isEmpty() [68]
                0.00    0.00     213/794         Plan::findRoute(DiscretePosition, DiscretePosition) [69]
                0.00    0.00     213/794         MotorController::goToXY(double, double) [78]
                0.00    0.00     213/796         Heap::Heap() [114]
                0.00    0.00     213/794         Heap::makeEmpty() [115]
                0.00    0.00     213/794         Heap::~Heap() [116]
                0.00    0.00      69/382         MotorController::goSlowToXY(double, double) [121]
-----------------------------------------------
                0.02    1.18     213/796         Plan::wayExploringTo(Position const&) [22]
                0.03    1.32     238/796         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.04    1.92     345/796         Plan::wayTo(Position const&) [17]
[23]     3.7    0.09    4.42     796         Plan::clearTravelCost(DiscretePosition const&, DiscretePosition const&) [23]
                4.42    0.00 31203200/31203200     Path::clear(DiscretePosition const&) [24]
-----------------------------------------------
                4.42    0.00 31203200/31203200     Plan::clearTravelCost(DiscretePosition const&, DiscretePosition const&) [23]
[24]     3.6    4.42    0.00 31203200         Path::clear(DiscretePosition const&) [24]
-----------------------------------------------
                0.05    0.00  243642/20822682     WSbeaconsearch::update() [47]
                3.91    0.00 20579040/20822682     WSmaze::createSensor() [8]
[25]     3.2    3.96    0.00 20822682         MathTools::angle_between(double, double, double) [25]
-----------------------------------------------
                0.75    0.00  601056/2997752     Plan::wayExploringTo(Position const&) [22]
                1.39    0.00 1110528/2997752     Plan::wayTo(Position const&) [17]
                1.61    0.00 1286168/2997752     Plan::wayThroughKnownPlacesTo(Position const&) [13]
[26]     3.0    3.75    0.00 2997752         WSmaze::CanGoWithMouse(int, int) [26]
-----------------------------------------------
                0.63    0.00  353076/1591748     Plan::wayExploringTo(Position const&) [22]
                2.19    0.00 1238672/1591748     Plan::wayThroughKnownPlacesTo(Position const&) [13]
[27]     2.3    2.82    0.00 1591748         WSmaze::isKnown(int, int) [27]
-----------------------------------------------
                0.74    1.40     112/112         WSbeacon::update(bool) [12]
[28]     1.7    0.74    1.40     112         WSbeacon::update_beacon_visible(bool, int, int) [28]
                1.40    0.00 4897489/4897489     WSbeacon::paint_pixel(int, int, int, int, int, int, int*) [34]
                0.00    0.01     224/224         WSbeacon::calc_best_definition(bool, int, int, int, int, char) [79]
-----------------------------------------------
                2.08    0.00    2778/2778        WSmaze::doErodesAndDilates() [10]
[29]     1.7    2.08    0.00    2778         WSmaze::erode(char (*) [280], char (*) [280]) [29]
-----------------------------------------------
                0.38    0.00   86147/424142      Plan::wayExploringTo(Position const&) [22]
                0.72    0.00  160667/424142      Plan::wayTo(Position const&) [17]
                0.79    0.00  177328/424142      Plan::wayThroughKnownPlacesTo(Position const&) [13]
[30]     1.5    1.89    0.00  424142         WSmaze::validToGoWithMouse(int, int) [30]
-----------------------------------------------
                1.61    0.00    2778/2778        WSmaze::doErodesAndDilates() [10]
[31]     1.3    1.61    0.00    2778         WSmaze::dilate(char (*) [280], char (*) [280]) [31]
-----------------------------------------------
                0.00    1.51       1/1           Mouse::Mouse(int, char**) [5]
[32]     1.2    0.00    1.51       1         WorldState::onlineWSCreation() [32]
                0.02    1.49       1/1           WSbeacon::WSbeacon(WorldState*) [33]
                0.00    0.00       1/1           WSparameters::update() [179]
                0.00    0.00       1/1           WSparameters::WSparameters() [180]
-----------------------------------------------
                0.02    1.49       1/1           WorldState::onlineWSCreation() [32]
[33]     1.2    0.02    1.49       1         WSbeacon::WSbeacon(WorldState*) [33]
                0.96    0.00       1/1           WSbeacon::calc_not_visible_mask_maps() [38]
                0.53    0.00       1/1           WSbeacon::calc_visible_mask_maps() [44]
-----------------------------------------------
                1.40    0.00 4897489/4897489     WSbeacon::update_beacon_visible(bool, int, int) [28]
[34]     1.1    1.40    0.00 4897489         WSbeacon::paint_pixel(int, int, int, int, int, int, int*) [34]
-----------------------------------------------
                0.00    0.37     213/794         Plan::wayExploringTo(Position const&) [22]
                0.00    0.41     238/794         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.59     343/794         Plan::wayTo(Position const&) [17]
[35]     1.1    0.00    1.36     794         Plan::optimizeRoute() [35]
                0.00    1.36    7284/7284        Plan::getNextOptimizedPoint() [36]
                0.01    0.00     794/1588        std::vector<DiscretePosition, std::allocator<DiscretePosition> >::erase(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >) [71]
                0.00    0.00       7/15          std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [127]
-----------------------------------------------
                0.00    1.36    7284/7284        Plan::optimizeRoute() [35]
[36]     1.1    0.00    1.36    7284         Plan::getNextOptimizedPoint() [36]
                0.16    1.20   31137/31137       Plan::tryWayToPoint(int) [37]
-----------------------------------------------
                0.16    1.20   31137/31137       Plan::getNextOptimizedPoint() [36]
[37]     1.1    0.16    1.20   31137         Plan::tryWayToPoint(int) [37]
                1.20    0.00  353986/2040093     WSmaze::goodToGoWithMouse(int, int) [20]
-----------------------------------------------
                0.96    0.00       1/1           WSbeacon::WSbeacon(WorldState*) [33]
[38]     0.8    0.96    0.00       1         WSbeacon::calc_not_visible_mask_maps() [38]
-----------------------------------------------
                0.05    0.00      78/1170        WSbeacon::update_walls_if_visible(double, double, int, int) [64]
                0.65    0.00    1092/1170        WSbeacon::update(bool) [12]
[39]     0.6    0.70    0.00    1170         WSbeacon::update_beacon_not_visible(double, double, int, int, bool, bool) [39]
-----------------------------------------------
                0.04    0.63     926/926         WSmaze::update() [4]
[40]     0.5    0.04    0.63     926         WSmaze::applyAllSensors() [40]
                0.01    0.31    1613/1613        WSmaze::applyCleanSensor(double, double, double) [49]
                0.01    0.30    2091/2091        WSmaze::applySensor(double, double, double) [50]
-----------------------------------------------
                0.66    0.00 2831925/2831925     WSmaze::createSensor() [8]
[41]     0.5    0.66    0.00 2831925         WSmaze::distri_normal_acc(double, double) [41]
-----------------------------------------------
                0.01    0.12   86147/424142      Plan::wayExploringTo(Position const&) [22]
                0.02    0.22  160667/424142      Plan::wayTo(Position const&) [17]
                0.02    0.24  177328/424142      Plan::wayThroughKnownPlacesTo(Position const&) [13]
[42]     0.5    0.04    0.57  424142         Heap::deleteMin() [42]
                0.57    0.00  424142/424142      Heap::percolateDown(int) [43]
-----------------------------------------------
                0.57    0.00  424142/424142      Heap::deleteMin() [42]
[43]     0.5    0.57    0.00  424142         Heap::percolateDown(int) [43]
-----------------------------------------------
                0.53    0.00       1/1           WSbeacon::WSbeacon(WorldState*) [33]
[44]     0.4    0.53    0.00       1         WSbeacon::calc_visible_mask_maps() [44]
-----------------------------------------------
                0.11    0.00  141495/648109      Plan::wayExploringTo(Position const&) [22]
                0.19    0.00  249655/648109      Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.20    0.00  256959/648109      Plan::wayTo(Position const&) [17]
[45]     0.4    0.50    0.00  648109         Path::update(Path*, double) [45]
-----------------------------------------------
                0.12    0.04     828/2441        WSmaze::applySensor(double, double, double) [50]
                0.24    0.08    1613/2441        WSmaze::applyCleanSensor(double, double, double) [49]
[46]     0.4    0.36    0.12    2441         WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double) [46]
                0.12    0.00  106804/231810      WSmaze::setMazeMatPos(int, int, char, double) [52]
-----------------------------------------------
                0.15    0.29     926/926         WorldState::update() [3]
[47]     0.4    0.15    0.29     926         WSbeaconsearch::update() [47]
                0.10    0.00  362992/362992      WSbeaconsearch::SearchArea::operator<(WSbeaconsearch::SearchArea const&) const [60]
                0.09    0.00  278196/278196      WSbeaconsearch::inArea(int) [61]
                0.06    0.00  278357/278357      WSbeaconsearch::outOfBounds(int) [63]
                0.05    0.00  243642/20822682     MathTools::angle_between(double, double, double) [25]
-----------------------------------------------
                0.01    0.38       9/9           Meditator::bestAction() [9]
[48]     0.3    0.01    0.38       9         Meditator::actionLeaveBeacon() [48]
                0.03    0.35       9/238         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00       9/805         WorldState::setPlan(Plan*) [109]
-----------------------------------------------
                0.01    0.31    1613/1613        WSmaze::applyAllSensors() [40]
[49]     0.3    0.01    0.31    1613         WSmaze::applyCleanSensor(double, double, double) [49]
                0.24    0.08    1613/2441        WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double) [46]
-----------------------------------------------
                0.01    0.30    2091/2091        WSmaze::applyAllSensors() [40]
[50]     0.2    0.01    0.30    2091         WSmaze::applySensor(double, double, double) [50]
                0.12    0.04     828/2441        WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double) [46]
                0.08    0.06    1263/1263        WSmaze::applySensorMatrix(int, double, double, double, double, double) [58]
-----------------------------------------------
                0.06    0.00  141708/648905      Plan::wayExploringTo(Position const&) [22]
                0.11    0.00  249893/648905      Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.11    0.00  257304/648905      Plan::wayTo(Position const&) [17]
[51]     0.2    0.28    0.00  648905         Heap::insert(Path*) [51]
-----------------------------------------------
                0.06    0.00   51852/231810      WSmaze::applySensorMatrix(int, double, double, double, double, double) [58]
                0.08    0.00   73154/231810      WSmaze::applyRobotMatrix(double, double) [59]
                0.12    0.00  106804/231810      WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double) [46]
[52]     0.2    0.25    0.00  231810         WSmaze::setMazeMatPos(int, int, char, double) [52]
-----------------------------------------------
                0.14    0.07       1/1           Meditator::Meditator(WorldState*, MotorController*) [54]
[53]     0.2    0.14    0.07       1         Plan::Plan(WorldState*, MotorController*) [53]
                0.03    0.04       1/1           Plan::initTravelCost() [62]
-----------------------------------------------
                0.00    0.21       1/1           Mouse::Mouse(int, char**) [5]
[54]     0.2    0.00    0.21       1         Meditator::Meditator(WorldState*, MotorController*) [54]
                0.14    0.07       1/1           Plan::Plan(WorldState*, MotorController*) [53]
-----------------------------------------------
                0.21    0.00      10/10          WSbeacon::update(bool) [12]
[55]     0.2    0.21    0.00      10         WSbeacon::update_beacon_area(int, int, double, double) [55]
-----------------------------------------------
                0.17    0.00       1/1           __do_global_ctors_aux [57]
[56]     0.1    0.17    0.00       1         global constructors keyed to _ZN6WSmazeC2EP10WorldState [56]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [162]
-----------------------------------------------
                                                 <spontaneous>
[57]     0.1    0.00    0.17                 __do_global_ctors_aux [57]
                0.17    0.00       1/1           global constructors keyed to _ZN6WSmazeC2EP10WorldState [56]
                0.00    0.00       1/1           global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log [138]
                0.00    0.00       1/1           global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController [146]
                0.00    0.00       1/1           global constructors keyed to _Z3guiPv [133]
                0.00    0.00       1/1           global constructors keyed to _ZN8WSbeaconC2EP10WorldState [144]
                0.00    0.00       1/1           global constructors keyed to _ZN8WSmotorsC2EP10WorldState [145]
                0.00    0.00       1/1           global constructors keyed to _ZN9WSsensorsC2EP10WorldState [147]
                0.00    0.00       1/1           global constructors keyed to _ZN10WSpositionC2EP10WorldState [135]
                0.00    0.00       1/1           global constructors keyed to _ZN10ConnectionC2EPcS0_i [134]
                0.00    0.00       1/1           global constructors keyed to _ZN6ActionC2Edd [143]
                0.00    0.00       1/1           global constructors keyed to _ZN10WorldStateC2Ei [136]
                0.00    0.00       1/1           global constructors keyed to _ZN3LogC2EP10WorldStateb [139]
                0.00    0.00       1/1           global constructors keyed to _ZN4HeapC2Ev [140]
                0.00    0.00       1/1           global constructors keyed to _ZN4Path4initERK16DiscretePosition [141]
                0.00    0.00       1/1           global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController [142]
                0.00    0.00       1/1           global constructors keyed to main [148]
                0.00    0.00       1/1           global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState [137]
-----------------------------------------------
                0.08    0.06    1263/1263        WSmaze::applySensor(double, double, double) [50]
[58]     0.1    0.08    0.06    1263         WSmaze::applySensorMatrix(int, double, double, double, double, double) [58]
                0.06    0.00   51852/231810      WSmaze::setMazeMatPos(int, int, char, double) [52]
-----------------------------------------------
                0.02    0.08     926/926         WSmaze::update() [4]
[59]     0.1    0.02    0.08     926         WSmaze::applyRobotMatrix(double, double) [59]
                0.08    0.00   73154/231810      WSmaze::setMazeMatPos(int, int, char, double) [52]
-----------------------------------------------
                0.10    0.00  362992/362992      WSbeaconsearch::update() [47]
[60]     0.1    0.10    0.00  362992         WSbeaconsearch::SearchArea::operator<(WSbeaconsearch::SearchArea const&) const [60]
-----------------------------------------------
                0.09    0.00  278196/278196      WSbeaconsearch::update() [47]
[61]     0.1    0.09    0.00  278196         WSbeaconsearch::inArea(int) [61]
-----------------------------------------------
                0.03    0.04       1/1           Plan::Plan(WorldState*, MotorController*) [53]
[62]     0.1    0.03    0.04       1         Plan::initTravelCost() [62]
                0.04    0.00  156800/156800      Path::init(DiscretePosition const&) [65]
-----------------------------------------------
                0.06    0.00  278357/278357      WSbeaconsearch::update() [47]
[63]     0.0    0.06    0.00  278357         WSbeaconsearch::outOfBounds(int) [63]
-----------------------------------------------
                0.00    0.05     224/224         WSbeacon::update(bool) [12]
[64]     0.0    0.00    0.05     224         WSbeacon::update_walls_if_visible(double, double, int, int) [64]
                0.05    0.00      78/1170        WSbeacon::update_beacon_not_visible(double, double, int, int, bool, bool) [39]
-----------------------------------------------
                0.04    0.00  156800/156800      Plan::initTravelCost() [62]
[65]     0.0    0.04    0.00  156800         Path::init(DiscretePosition const&) [65]
-----------------------------------------------
                0.01    0.02     805/805         Mouse::behave() [2]
[66]     0.0    0.01    0.02     805         MotorController::drive(Action*) [66]
                0.01    0.00     805/805         WSmotors::action_done(Action*) [73]
                0.00    0.01     803/803         DriveMotors(double, double) [77]
                0.00    0.00       1/1           Finish2(double, double) [84]
                0.00    0.00       1/1           SetReturningLed2(double, double) [83]
                0.00    0.00     805/805         Log::doneActionLog() [110]
                0.00    0.00     800/800         WSposition::PredictPosition(Action*) [112]
-----------------------------------------------
                0.03    0.00       1/1           WSmaze::WSmaze(WorldState*) [7]
[67]     0.0    0.03    0.00       1         WSmaze::init_prob() [67]
-----------------------------------------------
                0.00    0.00   86147/424144      Plan::wayExploringTo(Position const&) [22]
                0.01    0.00  160669/424144      Plan::wayTo(Position const&) [17]
                0.01    0.00  177328/424144      Plan::wayThroughKnownPlacesTo(Position const&) [13]
[68]     0.0    0.02    0.00  424144         Heap::isEmpty() [68]
-----------------------------------------------
                0.00    0.00     213/794         Plan::wayExploringTo(Position const&) [22]
                0.00    0.00     238/794         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00     343/794         Plan::wayTo(Position const&) [17]
[69]     0.0    0.01    0.01     794         Plan::findRoute(DiscretePosition, DiscretePosition) [69]
                0.01    0.00     794/1588        std::vector<DiscretePosition, std::allocator<DiscretePosition> >::erase(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >) [71]
                0.00    0.00       8/15          std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [127]
-----------------------------------------------
                                                 <spontaneous>
[70]     0.0    0.01    0.00                 WSmaze::nearWall(int, int) [70]
-----------------------------------------------
                0.01    0.00     794/1588        Plan::findRoute(DiscretePosition, DiscretePosition) [69]
                0.01    0.00     794/1588        Plan::optimizeRoute() [35]
[71]     0.0    0.01    0.00    1588         std::vector<DiscretePosition, std::allocator<DiscretePosition> >::erase(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >) [71]
-----------------------------------------------
                0.00    0.00       1/805         SetReturningLed2(double, double) [83]
                0.00    0.00       1/805         Finish2(double, double) [84]
                0.01    0.00     803/805         DriveMotors(double, double) [77]
[72]     0.0    0.01    0.00     805         PerformAction(bool, bool, double, double) [72]
-----------------------------------------------
                0.01    0.00     805/805         MotorController::drive(Action*) [66]
[73]     0.0    0.01    0.00     805         WSmotors::action_done(Action*) [73]
-----------------------------------------------
                0.00    0.00       6/728         MotorController::dockXY(double, double) [82]
                0.01    0.00     722/728         MotorController::goToXY(double, double) [78]
[74]     0.0    0.01    0.00     728         WSmotors::getMaxPowerLeftTurn(double, double, double*, double*) [74]
-----------------------------------------------
                0.00    0.00     214/438         Meditator::actionSearchBeacon() [21]
                0.01    0.00     224/438         WSbeacon::calc_best_definition(bool, int, int, int, int, char) [79]
[75]     0.0    0.01    0.00     438         WSbeacon::getProb() [75]
-----------------------------------------------
                0.01    0.00     345/345         Meditator::actionGoToBeacon() [16]
[76]     0.0    0.01    0.00     345         WSbeacon::getX() [76]
-----------------------------------------------
                0.00    0.01     803/803         MotorController::drive(Action*) [66]
[77]     0.0    0.00    0.01     803         DriveMotors(double, double) [77]
                0.01    0.00     803/805         PerformAction(bool, bool, double, double) [72]
-----------------------------------------------
                0.00    0.00     213/794         Plan::wayExploringTo(Position const&) [22]
                0.00    0.00     238/794         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00     343/794         Plan::wayTo(Position const&) [17]
[78]     0.0    0.00    0.01     794         MotorController::goToXY(double, double) [78]
                0.01    0.00     722/728         WSmotors::getMaxPowerLeftTurn(double, double, double*, double*) [74]
                0.00    0.00     794/804         Action::Action(double, double) [111]
                0.00    0.00     665/673         WSmotors::getMaxPowerFront(double, double, double*, double*) [119]
-----------------------------------------------
                0.00    0.01     224/224         WSbeacon::update_beacon_visible(bool, int, int) [28]
[79]     0.0    0.00    0.01     224         WSbeacon::calc_best_definition(bool, int, int, int, int, char) [79]
                0.01    0.00     224/438         WSbeacon::getProb() [75]
-----------------------------------------------
                0.01    0.00     926/926         WorldState::update() [3]
[80]     0.0    0.01    0.00     926         GetStopButton() [80]
-----------------------------------------------
                0.01    0.00     926/926         WorldState::update() [3]
[81]     0.0    0.01    0.00     926         GetReturningLed() [81]
-----------------------------------------------
                0.00    0.00       8/8           Meditator::actionGoToStart() [14]
[82]     0.0    0.00    0.00       8         MotorController::dockXY(double, double) [82]
                0.00    0.00       6/728         WSmotors::getMaxPowerLeftTurn(double, double, double*, double*) [74]
                0.00    0.00       8/673         WSmotors::getMaxPowerFront(double, double, double*, double*) [119]
                0.00    0.00       8/804         Action::Action(double, double) [111]
-----------------------------------------------
                0.00    0.00       1/1           MotorController::drive(Action*) [66]
[83]     0.0    0.00    0.00       1         SetReturningLed2(double, double) [83]
                0.00    0.00       1/805         PerformAction(bool, bool, double, double) [72]
-----------------------------------------------
                0.00    0.00       1/1           MotorController::drive(Action*) [66]
[84]     0.0    0.00    0.00       1         Finish2(double, double) [84]
                0.00    0.00       1/805         PerformAction(bool, bool, double, double) [72]
-----------------------------------------------
                0.00    0.00    3704/3704        WSsensors::update() [104]
[91]     0.0    0.00    0.00    3704         GetObstacleSensor(int) [91]
-----------------------------------------------
                0.00    0.00    3700/3700        parse_measures_packet(char const*, measures_t*) [106]
[92]     0.0    0.00    0.00    3700         GetXmlAttribOnOff(char const*, char const*, bool*) [92]
-----------------------------------------------
                0.00    0.00    1850/1850        parse_measures_packet(char const*, measures_t*) [106]
[93]     0.0    0.00    0.00    1850         GetXmlAttribYesNo(char const*, char const*, bool*) [93]
-----------------------------------------------
                0.00    0.00     668/1594        WSbeacon::update(bool) [12]
                0.00    0.00     926/1594        WSsensors::update() [104]
[94]     0.0    0.00    0.00    1594         GetGroundSensor() [94]
-----------------------------------------------
                0.00    0.00       1/935         ConnectToServer(char const*, int, char const*, int, double const*) [153]
                0.00    0.00     934/935         socket_thread(void*) [198]
[95]     0.0    0.00    0.00     935         recv_packet(char*) [95]
-----------------------------------------------
                0.00    0.00     926/926         WorldState::update() [3]
[96]     0.0    0.00    0.00     926         GetFinished() [96]
-----------------------------------------------
                0.00    0.00     926/926         WorldState::update() [3]
[97]     0.0    0.00    0.00     926         ReadSensors() [97]
-----------------------------------------------
                0.00    0.00     926/926         WorldState::update() [3]
[98]     0.0    0.00    0.00     926         GetStartButton() [98]
-----------------------------------------------
                0.00    0.00     926/926         WSsensors::update() [104]
[99]     0.0    0.00    0.00     926         GetBumperSensor() [99]
-----------------------------------------------
                0.00    0.00     926/926         WSsensors::update() [104]
[100]    0.0    0.00    0.00     926         GetCompassSensor() [100]
-----------------------------------------------
                0.00    0.00     926/926         WorldState::update() [3]
[101]    0.0    0.00    0.00     926         GetTime() [101]
-----------------------------------------------
                0.00    0.00     926/926         WorldState::update() [3]
[102]    0.0    0.00    0.00     926         WSposition::updateMinMaxEver() [102]
-----------------------------------------------
                0.00    0.00     926/926         WorldState::update() [3]
[103]    0.0    0.00    0.00     926         WSposition::update() [103]
-----------------------------------------------
                0.00    0.00     926/926         WorldState::update() [3]
[104]    0.0    0.00    0.00     926         WSsensors::update() [104]
                0.00    0.00    3704/3704        GetObstacleSensor(int) [91]
                0.00    0.00     926/926         GetBumperSensor() [99]
                0.00    0.00     926/1594        GetGroundSensor() [94]
                0.00    0.00     926/926         GetCompassSensor() [100]
-----------------------------------------------
                0.00    0.00     925/925         parse_measures_packet(char const*, measures_t*) [106]
[105]    0.0    0.00    0.00     925         ReadObstacleSensors(char const*, measures_t*) [105]
-----------------------------------------------
                0.00    0.00     925/925         socket_thread(void*) [198]
[106]    0.0    0.00    0.00     925         parse_measures_packet(char const*, measures_t*) [106]
                0.00    0.00    3700/3700        GetXmlAttribOnOff(char const*, char const*, bool*) [92]
                0.00    0.00    1850/1850        GetXmlAttribYesNo(char const*, char const*, bool*) [93]
                0.00    0.00     925/925         ReadObstacleSensors(char const*, measures_t*) [105]
-----------------------------------------------
                0.00    0.00     923/923         Mouse::behave() [2]
[107]    0.0    0.00    0.00     923         Log::update() [107]
-----------------------------------------------
                0.00    0.00     807/807         WorldState::update() [3]
[108]    0.0    0.00    0.00     807         WSmotors::update() [108]
-----------------------------------------------
                0.00    0.00       9/805         Meditator::actionLeaveBeacon() [48]
                0.00    0.00     213/805         Meditator::actionSearchBeacon() [21]
                0.00    0.00     238/805         Meditator::actionGoToStart() [14]
                0.00    0.00     345/805         Meditator::actionGoToBeacon() [16]
[109]    0.0    0.00    0.00     805         WorldState::setPlan(Plan*) [109]
-----------------------------------------------
                0.00    0.00     805/805         MotorController::drive(Action*) [66]
[110]    0.0    0.00    0.00     805         Log::doneActionLog() [110]
-----------------------------------------------
                0.00    0.00       2/804         Plan::wayTo(Position const&) [17]
                0.00    0.00       8/804         MotorController::dockXY(double, double) [82]
                0.00    0.00     794/804         MotorController::goToXY(double, double) [78]
[111]    0.0    0.00    0.00     804         Action::Action(double, double) [111]
-----------------------------------------------
                0.00    0.00     800/800         MotorController::drive(Action*) [66]
[112]    0.0    0.00    0.00     800         WSposition::PredictPosition(Action*) [112]
-----------------------------------------------
                0.00    0.00     800/800         Mouse::behave() [2]
[113]    0.0    0.00    0.00     800         MotorController::updateChangedActions() [113]
                0.00    0.00       9/9           std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::erase(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>) [131]
                0.00    0.00       9/9           std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::insert(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>, MotorController::ChangedAction const&) [132]
-----------------------------------------------
                0.00    0.00     213/796         Plan::wayExploringTo(Position const&) [22]
                0.00    0.00     238/796         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00     345/796         Plan::wayTo(Position const&) [17]
[114]    0.0    0.00    0.00     796         Heap::Heap() [114]
-----------------------------------------------
                0.00    0.00     213/794         Plan::wayExploringTo(Position const&) [22]
                0.00    0.00     238/794         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00     343/794         Plan::wayTo(Position const&) [17]
[115]    0.0    0.00    0.00     794         Heap::makeEmpty() [115]
-----------------------------------------------
                0.00    0.00     213/794         Plan::wayExploringTo(Position const&) [22]
                0.00    0.00     238/794         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00     343/794         Plan::wayTo(Position const&) [17]
[116]    0.0    0.00    0.00     794         Heap::~Heap() [116]
-----------------------------------------------
                0.00    0.00     214/788         Meditator::actionSearchBeacon() [21]
                0.00    0.00     229/788         Meditator::actionGoToStart() [14]
                0.00    0.00     345/788         Meditator::actionGoToBeacon() [16]
[117]    0.0    0.00    0.00     788         Meditator::dealWithCollision() [117]
                0.00    0.00     788/788         WSsensors::CollidedRecently() [118]
-----------------------------------------------
                0.00    0.00     788/788         Meditator::dealWithCollision() [117]
[118]    0.0    0.00    0.00     788         WSsensors::CollidedRecently() [118]
-----------------------------------------------
                0.00    0.00       8/673         MotorController::dockXY(double, double) [82]
                0.00    0.00     665/673         MotorController::goToXY(double, double) [78]
[119]    0.0    0.00    0.00     673         WSmotors::getMaxPowerFront(double, double, double*, double*) [119]
-----------------------------------------------
                0.00    0.00     668/668         WorldState::update() [3]
[120]    0.0    0.00    0.00     668         IsBeaconReady() [120]
-----------------------------------------------
                0.00    0.00      69/382         Plan::wayExploringTo(Position const&) [22]
                0.00    0.00     140/382         Plan::wayThroughKnownPlacesTo(Position const&) [13]
                0.00    0.00     173/382         Plan::wayTo(Position const&) [17]
[121]    0.0    0.00    0.00     382         MotorController::goSlowToXY(double, double) [121]
-----------------------------------------------
                0.00    0.00     345/345         Meditator::actionGoToBeacon() [16]
[122]    0.0    0.00    0.00     345         WSbeacon::getY() [122]
-----------------------------------------------
                0.00    0.00     334/334         WSbeacon::update(bool) [12]
[123]    0.0    0.00    0.00     334         GetBeaconSensor() [123]
-----------------------------------------------
                0.00    0.00       1/214         WSbeacon::markCurrentPositionAsUnreachable() [194]
                0.00    0.00     213/214         Meditator::actionSearchBeacon() [21]
[124]    0.0    0.00    0.00     214         WSbeaconsearch::getProbableBeaconPos() [124]
-----------------------------------------------
                0.00    0.00      30/30          std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [127]
[125]    0.0    0.00    0.00      30         __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > >(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __false_type) [125]
-----------------------------------------------
                0.00    0.00      20/20          std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&) [128]
[126]    0.0    0.00    0.00      20         __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > >(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __false_type) [126]
-----------------------------------------------
                0.00    0.00       7/15          Plan::optimizeRoute() [35]
                0.00    0.00       8/15          Plan::findRoute(DiscretePosition, DiscretePosition) [69]
[127]    0.0    0.00    0.00      15         std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&) [127]
                0.00    0.00      30/30          __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > >(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __false_type) [125]
-----------------------------------------------
                0.00    0.00      10/10          WSbeaconsearch::WSbeaconsearch(WorldState*) [183]
[128]    0.0    0.00    0.00      10         std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&) [128]
                0.00    0.00      20/20          __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > >(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __false_type) [126]
-----------------------------------------------
                0.00    0.00       9/9           Meditator::bestAction() [9]
[129]    0.0    0.00    0.00       9         MotorController::isMouseStoppedAhead() [129]
-----------------------------------------------
                0.00    0.00       9/9           std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::insert(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>, MotorController::ChangedAction const&) [132]
[130]    0.0    0.00    0.00       9         std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::_M_create_node(MotorController::ChangedAction const&) [130]
-----------------------------------------------
                0.00    0.00       9/9           MotorController::updateChangedActions() [113]
[131]    0.0    0.00    0.00       9         std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::erase(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>) [131]
-----------------------------------------------
                0.00    0.00       9/9           MotorController::updateChangedActions() [113]
[132]    0.0    0.00    0.00       9         std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::insert(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>, MotorController::ChangedAction const&) [132]
                0.00    0.00       9/9           std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::_M_create_node(MotorController::ChangedAction const&) [130]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[133]    0.0    0.00    0.00       1         global constructors keyed to _Z3guiPv [133]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [161]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[134]    0.0    0.00    0.00       1         global constructors keyed to _ZN10ConnectionC2EPcS0_i [134]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [167]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[135]    0.0    0.00    0.00       1         global constructors keyed to _ZN10WSpositionC2EP10WorldState [135]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [166]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[136]    0.0    0.00    0.00       1         global constructors keyed to _ZN10WorldStateC2Ei [136]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [169]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[137]    0.0    0.00    0.00       1         global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState [137]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [175]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[138]    0.0    0.00    0.00       1         global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log [138]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [159]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[139]    0.0    0.00    0.00       1         global constructors keyed to _ZN3LogC2EP10WorldStateb [139]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [170]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[140]    0.0    0.00    0.00       1         global constructors keyed to _ZN4HeapC2Ev [140]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [171]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[141]    0.0    0.00    0.00       1         global constructors keyed to _ZN4Path4initERK16DiscretePosition [141]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [172]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[142]    0.0    0.00    0.00       1         global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController [142]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [173]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[143]    0.0    0.00    0.00       1         global constructors keyed to _ZN6ActionC2Edd [143]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [168]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[144]    0.0    0.00    0.00       1         global constructors keyed to _ZN8WSbeaconC2EP10WorldState [144]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [163]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[145]    0.0    0.00    0.00       1         global constructors keyed to _ZN8WSmotorsC2EP10WorldState [145]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [164]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[146]    0.0    0.00    0.00       1         global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController [146]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [160]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[147]    0.0    0.00    0.00       1         global constructors keyed to _ZN9WSsensorsC2EP10WorldState [147]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [165]
-----------------------------------------------
                0.00    0.00       1/1           __do_global_ctors_aux [57]
[148]    0.0    0.00    0.00       1         global constructors keyed to main [148]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [174]
-----------------------------------------------
                0.00    0.00       1/1           Connection::connect() [176]
[149]    0.0    0.00    0.00       1         InitRobot2(char*, int, double*, char*) [149]
                0.00    0.00       1/1           ConnectToServer(char const*, int, char const*, int, double const*) [153]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [179]
[150]    0.0    0.00    0.00       1         GetCycleTime() [150]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [179]
[151]    0.0    0.00    0.00       1         GetFinalTime() [151]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [179]
[152]    0.0    0.00    0.00       1         GetNoiseMotors() [152]
-----------------------------------------------
                0.00    0.00       1/1           InitRobot2(char*, int, double*, char*) [149]
[153]    0.0    0.00    0.00       1         ConnectToServer(char const*, int, char const*, int, double const*) [153]
                0.00    0.00       1/935         recv_packet(char*) [95]
                0.00    0.00       1/1           parse_params_packet(char const*) [155]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [179]
[154]    0.0    0.00    0.00       1         GetRunningTimeout() [154]
-----------------------------------------------
                0.00    0.00       1/1           ConnectToServer(char const*, int, char const*, int, double const*) [153]
[155]    0.0    0.00    0.00       1         parse_params_packet(char const*) [155]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [179]
[156]    0.0    0.00    0.00       1         GetNoiseBeaconSensor() [156]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [179]
[157]    0.0    0.00    0.00       1         GetNoiseCompassSensor() [157]
-----------------------------------------------
                0.00    0.00       1/1           WSparameters::update() [179]
[158]    0.0    0.00    0.00       1         GetNoiseObstacleSensor() [158]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log [138]
[159]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [159]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController [146]
[160]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [160]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _Z3guiPv [133]
[161]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [161]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN6WSmazeC2EP10WorldState [56]
[162]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [162]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN8WSbeaconC2EP10WorldState [144]
[163]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [163]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN8WSmotorsC2EP10WorldState [145]
[164]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [164]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN9WSsensorsC2EP10WorldState [147]
[165]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [165]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN10WSpositionC2EP10WorldState [135]
[166]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [166]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN10ConnectionC2EPcS0_i [134]
[167]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [167]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN6ActionC2Edd [143]
[168]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [168]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN10WorldStateC2Ei [136]
[169]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [169]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN3LogC2EP10WorldStateb [139]
[170]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [170]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN4HeapC2Ev [140]
[171]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [171]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN4Path4initERK16DiscretePosition [141]
[172]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [172]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController [142]
[173]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [173]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to main [148]
[174]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [174]
-----------------------------------------------
                0.00    0.00       1/1           global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState [137]
[175]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [175]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [5]
[176]    0.0    0.00    0.00       1         Connection::connect() [176]
                0.00    0.00       1/1           InitRobot2(char*, int, double*, char*) [149]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [5]
[177]    0.0    0.00    0.00       1         Connection::Connection(char*, char*, int) [177]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int) [6]
[178]    0.0    0.00    0.00       1         WSposition::WSposition(WorldState*) [178]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::onlineWSCreation() [32]
[179]    0.0    0.00    0.00       1         WSparameters::update() [179]
                0.00    0.00       1/1           GetFinalTime() [151]
                0.00    0.00       1/1           GetRunningTimeout() [154]
                0.00    0.00       1/1           GetCycleTime() [150]
                0.00    0.00       1/1           GetNoiseCompassSensor() [157]
                0.00    0.00       1/1           GetNoiseBeaconSensor() [156]
                0.00    0.00       1/1           GetNoiseObstacleSensor() [158]
                0.00    0.00       1/1           GetNoiseMotors() [152]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::onlineWSCreation() [32]
[180]    0.0    0.00    0.00       1         WSparameters::WSparameters() [180]
-----------------------------------------------
                0.00    0.00       1/1           Meditator::bestAction() [9]
[181]    0.0    0.00    0.00       1         WSbeaconsearch::allUnreachableOrVisited() [181]
-----------------------------------------------
                0.00    0.00       1/1           Meditator::bestAction() [9]
[182]    0.0    0.00    0.00       1         WSbeaconsearch::markCurrentPositionAsUnreachable() [182]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int) [6]
[183]    0.0    0.00    0.00       1         WSbeaconsearch::WSbeaconsearch(WorldState*) [183]
                0.00    0.00      10/10          std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&) [128]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [5]
[184]    0.0    0.00    0.00       1         MotorController::MotorController(WorldState*, Log*) [184]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::behave() [2]
[185]    0.0    0.00    0.00       1         Log::init() [185]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [5]
[186]    0.0    0.00    0.00       1         Log::Log(WorldState*, bool) [186]
-----------------------------------------------
                0.00    0.00       1/1           Mouse::Mouse(int, char**) [5]
[187]    0.0    0.00    0.00       1         Mouse::parse_opt(int, char**) [187]
-----------------------------------------------
                0.00    0.00       1/1           Meditator::actionGoToStart() [14]
[188]    0.0    0.00    0.00       1         Action::Action(atype, double, double) [188]
-----------------------------------------------
                0.00    0.00       1/1           WSmaze::WSmaze(WorldState*) [7]
[189]    0.0    0.00    0.00       1         WSmaze::createKnownMatrix() [189]
-----------------------------------------------
                0.00    0.00       1/1           WSmaze::WSmaze(WorldState*) [7]
[190]    0.0    0.00    0.00       1         WSmaze::createRobotMatrix() [190]
-----------------------------------------------
                0.00    0.00       1/1           WSmaze::WSmaze(WorldState*) [7]
[191]    0.0    0.00    0.00       1         WSmaze::createGoMouseMatrix() [191]
-----------------------------------------------
                0.00    0.00       1/1           WSmaze::WSmaze(WorldState*) [7]
[192]    0.0    0.00    0.00       1         WSmaze::createValidGoMatrix() [192]
-----------------------------------------------
                0.00    0.00       1/1           WSmaze::WSmaze(WorldState*) [7]
[193]    0.0    0.00    0.00       1         WSmaze::createGoodMouseMatrix() [193]
-----------------------------------------------
                0.00    0.00       1/1           Meditator::bestAction() [9]
[194]    0.0    0.00    0.00       1         WSbeacon::markCurrentPositionAsUnreachable() [194]
                0.00    0.00       1/214         WSbeaconsearch::getProbableBeaconPos() [124]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int) [6]
[195]    0.0    0.00    0.00       1         WSmotors::WSmotors(WorldState*) [195]
-----------------------------------------------
                0.00    0.00       1/1           WorldState::WorldState(int) [6]
[196]    0.0    0.00    0.00       1         WSsensors::WSsensors(WorldState*) [196]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.


Index by function name

 [133] global constructors keyed to _Z3guiPv [84] Finish2(double, double) [59] WSmaze::applyRobotMatrix(double, double)
 [134] global constructors keyed to _ZN10ConnectionC2EPcS0_i [101] GetTime() [58] WSmaze::applySensorMatrix(int, double, double, double, double, double)
 [135] global constructors keyed to _ZN10WSpositionC2EP10WorldState [176] Connection::connect() [189] WSmaze::createKnownMatrix()
 [136] global constructors keyed to _ZN10WorldStateC2Ei [177] Connection::Connection(char*, char*, int) [190] WSmaze::createRobotMatrix()
 [137] global constructors keyed to _ZN14WSbeaconsearchC2EP10WorldState [112] WSposition::PredictPosition(Action*) [41] WSmaze::distri_normal_acc(double, double)
 [138] global constructors keyed to _ZN15MotorControllerC2EP10WorldStateP3Log [102] WSposition::updateMinMaxEver() [20] WSmaze::goodToGoWithMouse(int, int)
 [139] global constructors keyed to _ZN3LogC2EP10WorldStateb [103] WSposition::update() [15] WSmaze::clearIsKnownMatrix()
 [140] global constructors keyed to _ZN4HeapC2Ev [178] WSposition::WSposition(WorldState*) [10] WSmaze::doErodesAndDilates()
 [141] global constructors keyed to _ZN4Path4initERK16DiscretePosition [32] WorldState::onlineWSCreation() [30] WSmaze::validToGoWithMouse(int, int)
 [142] global constructors keyed to _ZN4PlanC2EP10WorldStateP15MotorController [3] WorldState::update() [191] WSmaze::createGoMouseMatrix()
 [143] global constructors keyed to _ZN6ActionC2Edd [109] WorldState::setPlan(Plan*) [192] WSmaze::createValidGoMatrix()
  [56] global constructors keyed to _ZN6WSmazeC2EP10WorldState [6] WorldState::WorldState(int) [193] WSmaze::createGoodMouseMatrix()
 [144] global constructors keyed to _ZN8WSbeaconC2EP10WorldState [179] WSparameters::update() [46] WSmaze::applyCleanSensorMatrix(int, double, double, double, double, double)
 [145] global constructors keyed to _ZN8WSmotorsC2EP10WorldState [180] WSparameters::WSparameters() [11] WSmaze::clearGoodToGoMouseMatrix()
 [146] global constructors keyed to _ZN9MeditatorC2EP10WorldStateP15MotorController [63] WSbeaconsearch::outOfBounds(int) [18] WSmaze::clearCanGoWithMouseMatrix()
 [147] global constructors keyed to _ZN9WSsensorsC2EP10WorldState [124] WSbeaconsearch::getProbableBeaconPos() [29] WSmaze::erode(char (*) [280], char (*) [280])
 [148] global constructors keyed to main [181] WSbeaconsearch::allUnreachableOrVisited() [31] WSmaze::dilate(char (*) [280], char (*) [280])
 [149] InitRobot2(char*, int, double*, char*) [182] WSbeaconsearch::markCurrentPositionAsUnreachable() [4] WSmaze::update()
  [77] DriveMotors(double, double) [61] WSbeaconsearch::inArea(int) [27] WSmaze::isKnown(int, int)
  [96] GetFinished()          [47] WSbeaconsearch::update() [70] WSmaze::nearWall(int, int)
  [97] ReadSensors()         [183] WSbeaconsearch::WSbeaconsearch(WorldState*) [67] WSmaze::init_prob()
  [95] recv_packet(char*)    [121] MotorController::goSlowToXY(double, double) [7] WSmaze::WSmaze(WorldState*)
 [150] GetCycleTime()        [129] MotorController::isMouseStoppedAhead() [34] WSbeacon::paint_pixel(int, int, int, int, int, int, int*)
 [151] GetFinalTime()        [113] MotorController::updateChangedActions() [19] WSbeacon::forceFindMax()
  [80] GetStopButton()        [66] MotorController::drive(Action*) [55] WSbeacon::update_beacon_area(int, int, double, double)
 [120] IsBeaconReady()        [82] MotorController::dockXY(double, double) [79] WSbeacon::calc_best_definition(bool, int, int, int, int, char)
  [72] PerformAction(bool, bool, double, double) [78] MotorController::goToXY(double, double) [28] WSbeacon::update_beacon_visible(bool, int, int)
 [152] GetNoiseMotors()      [184] MotorController::MotorController(WorldState*, Log*) [44] WSbeacon::calc_visible_mask_maps()
  [98] GetStartButton()      [110] Log::doneActionLog()   [64] WSbeacon::update_walls_if_visible(double, double, int, int)
 [153] ConnectToServer(char const*, int, char const*, int, double const*) [185] Log::init() [39] WSbeacon::update_beacon_not_visible(double, double, int, int, bool, bool)
 [123] GetBeaconSensor()     [107] Log::update()          [38] WSbeacon::calc_not_visible_mask_maps()
  [99] GetBumperSensor()     [186] Log::Log(WorldState*, bool) [194] WSbeacon::markCurrentPositionAsUnreachable()
  [94] GetGroundSensor()      [43] Heap::percolateDown(int) [76] WSbeacon::getX()
  [81] GetReturningLed()      [51] Heap::insert(Path*)   [122] WSbeacon::getY()
 [100] GetCompassSensor()     [68] Heap::isEmpty()        [12] WSbeacon::update(bool)
  [83] SetReturningLed2(double, double) [42] Heap::deleteMin() [75] WSbeacon::getProb()
  [91] GetObstacleSensor(int) [115] Heap::makeEmpty()     [33] WSbeacon::WSbeacon(WorldState*)
 [154] GetRunningTimeout()   [114] Heap::Heap()           [73] WSmotors::action_done(Action*)
  [92] GetXmlAttribOnOff(char const*, char const*, bool*) [116] Heap::~Heap() [119] WSmotors::getMaxPowerFront(double, double, double*, double*)
  [93] GetXmlAttribYesNo(char const*, char const*, bool*) [65] Path::init(DiscretePosition const&) [74] WSmotors::getMaxPowerLeftTurn(double, double, double*, double*)
 [105] ReadObstacleSensors(char const*, measures_t*) [24] Path::clear(DiscretePosition const&) [108] WSmotors::update()
 [155] parse_params_packet(char const*) [45] Path::update(Path*, double) [195] WSmotors::WSmotors(WorldState*)
 [156] GetNoiseBeaconSensor() [35] Plan::optimizeRoute()  [25] MathTools::angle_between(double, double, double)
 [157] GetNoiseCompassSensor() [37] Plan::tryWayToPoint(int) [9] Meditator::bestAction()
 [106] parse_measures_packet(char const*, measures_t*) [62] Plan::initTravelCost() [14] Meditator::actionGoToStart()
 [158] GetNoiseObstacleSensor() [22] Plan::wayExploringTo(Position const&) [16] Meditator::actionGoToBeacon()
 [159] __static_initialization_and_destruction_0(int, int) [23] Plan::clearTravelCost(DiscretePosition const&, DiscretePosition const&) [48] Meditator::actionLeaveBeacon()
 [160] __static_initialization_and_destruction_0(int, int) [36] Plan::getNextOptimizedPoint() [117] Meditator::dealWithCollision()
 [161] __static_initialization_and_destruction_0(int, int) [13] Plan::wayThroughKnownPlacesTo(Position const&) [21] Meditator::actionSearchBeacon()
 [162] __static_initialization_and_destruction_0(int, int) [17] Plan::wayTo(Position const&) [54] Meditator::Meditator(WorldState*, MotorController*)
 [163] __static_initialization_and_destruction_0(int, int) [69] Plan::findRoute(DiscretePosition, DiscretePosition) [118] WSsensors::CollidedRecently()
 [164] __static_initialization_and_destruction_0(int, int) [53] Plan::Plan(WorldState*, MotorController*) [104] WSsensors::update()
 [165] __static_initialization_and_destruction_0(int, int) [2] Mouse::behave() [196] WSsensors::WSsensors(WorldState*)
 [166] __static_initialization_and_destruction_0(int, int) [187] Mouse::parse_opt(int, char**) [60] WSbeaconsearch::SearchArea::operator<(WSbeaconsearch::SearchArea const&) const
 [167] __static_initialization_and_destruction_0(int, int) [5] Mouse::Mouse(int, char**) [130] std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::_M_create_node(MotorController::ChangedAction const&)
 [168] __static_initialization_and_destruction_0(int, int) [188] Action::Action(atype, double, double) [131] std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::erase(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>)
 [169] __static_initialization_and_destruction_0(int, int) [111] Action::Action(double, double) [132] std::list<MotorController::ChangedAction, std::allocator<MotorController::ChangedAction> >::insert(std::_List_iterator<MotorController::ChangedAction, MotorController::ChangedAction&, MotorController::ChangedAction*>, MotorController::ChangedAction const&)
 [170] __static_initialization_and_destruction_0(int, int) [50] WSmaze::applySensor(double, double, double) [127] std::vector<DiscretePosition, std::allocator<DiscretePosition> >::_M_insert_aux(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, DiscretePosition const&)
 [171] __static_initialization_and_destruction_0(int, int) [8] WSmaze::createSensor() [71] std::vector<DiscretePosition, std::allocator<DiscretePosition> >::erase(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >)
 [172] __static_initialization_and_destruction_0(int, int) [52] WSmaze::setMazeMatPos(int, int, char, double) [128] std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> >::_M_insert_aux(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, WSbeaconsearch::SearchArea const&)
 [173] __static_initialization_and_destruction_0(int, int) [26] WSmaze::CanGoWithMouse(int, int) [125] __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > > >(__gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __gnu_cxx::__normal_iterator<DiscretePosition*, std::vector<DiscretePosition, std::allocator<DiscretePosition> > >, __false_type)
 [174] __static_initialization_and_destruction_0(int, int) [40] WSmaze::applyAllSensors() [126] __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > std::__uninitialized_copy_aux<__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > > >(__gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __gnu_cxx::__normal_iterator<WSbeaconsearch::SearchArea*, std::vector<WSbeaconsearch::SearchArea, std::allocator<WSbeaconsearch::SearchArea> > >, __false_type)
 [175] __static_initialization_and_destruction_0(int, int) [49] WSmaze::applyCleanSensor(double, double, double)
